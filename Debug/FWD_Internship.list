
FWD_Internship.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000644  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08000808  08000808  00010808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000820  08000820  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08000820  08000820  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000820  08000820  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000820  08000820  00010820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000824  08000824  00010824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08000828  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000024  0800084c  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000040  0800084c  00020040  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002d38  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000609  00000000  00000000  00022d8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000f8  00000000  00000000  00023398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000080  00000000  00000000  00023490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001669  00000000  00000000  00023510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001e50  00000000  00000000  00024b79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000065c1  00000000  00000000  000269c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0002cf8a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001a0  00000000  00000000  0002cfe0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000024 	.word	0x20000024
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080007f0 	.word	0x080007f0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000028 	.word	0x20000028
 8000200:	080007f0 	.word	0x080007f0

08000204 <main>:
#include "main.h"

extern Port_ConfigType AllPinConfigs[NUM_OF_USED_PINS];
int main()
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
    NVIC_Init();
 8000208:	f000 f8a4 	bl	8000354 <NVIC_Init>
    RCC->RCC_AHB1ENR |=(1<<0);
 800020c:	4b0f      	ldr	r3, [pc, #60]	; (800024c <main+0x48>)
 800020e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000210:	4a0e      	ldr	r2, [pc, #56]	; (800024c <main+0x48>)
 8000212:	f043 0301 	orr.w	r3, r3, #1
 8000216:	6313      	str	r3, [r2, #48]	; 0x30
    Port_Init(&AllPinConfigs);
 8000218:	480d      	ldr	r0, [pc, #52]	; (8000250 <main+0x4c>)
 800021a:	f000 f9df 	bl	80005dc <Port_Init>
    Dio_ReadChannel(Dio_CHANNEL_PA5);
 800021e:	2005      	movs	r0, #5
 8000220:	f000 f818 	bl	8000254 <Dio_ReadChannel>
    while(1)
    {
    	Dio_FlipChannel(Dio_CHANNEL_PA5);
 8000224:	2005      	movs	r0, #5
 8000226:	f000 f860 	bl	80002ea <Dio_FlipChannel>
    	Dio_FlipChannel(Dio_CHANNEL_PA5);
 800022a:	2005      	movs	r0, #5
 800022c:	f000 f85d 	bl	80002ea <Dio_FlipChannel>
    	Dio_FlipChannel(Dio_CHANNEL_PA5);
 8000230:	2005      	movs	r0, #5
 8000232:	f000 f85a 	bl	80002ea <Dio_FlipChannel>
    	Dio_FlipChannel(Dio_CHANNEL_PA5);
 8000236:	2005      	movs	r0, #5
 8000238:	f000 f857 	bl	80002ea <Dio_FlipChannel>
    	Dio_FlipChannel(Dio_CHANNEL_PA5);
 800023c:	2005      	movs	r0, #5
 800023e:	f000 f854 	bl	80002ea <Dio_FlipChannel>
    	Dio_FlipChannel(Dio_CHANNEL_PA5);
 8000242:	2005      	movs	r0, #5
 8000244:	f000 f851 	bl	80002ea <Dio_FlipChannel>
    	Dio_FlipChannel(Dio_CHANNEL_PA5);
 8000248:	e7ec      	b.n	8000224 <main+0x20>
 800024a:	bf00      	nop
 800024c:	40023800 	.word	0x40023800
 8000250:	20000000 	.word	0x20000000

08000254 <Dio_ReadChannel>:
 *  @usage       
 *  @param   ChannelId     
 *  @return      
 *********************************************************************************************************************/
Dio_LevelType Dio_ReadChannel(Dio_ChannelType ChannelId)
{
 8000254:	b480      	push	{r7}
 8000256:	b085      	sub	sp, #20
 8000258:	af00      	add	r7, sp, #0
 800025a:	4603      	mov	r3, r0
 800025c:	71fb      	strb	r3, [r7, #7]
    uint8_t ChannelPort   = ChannelId/BSRR_CHANNEL;
 800025e:	79fb      	ldrb	r3, [r7, #7]
 8000260:	091b      	lsrs	r3, r3, #4
 8000262:	73fb      	strb	r3, [r7, #15]
    uint8_t ChannelNumber = ChannelId%BSRR_CHANNEL;
 8000264:	79fb      	ldrb	r3, [r7, #7]
 8000266:	f003 030f 	and.w	r3, r3, #15
 800026a:	73bb      	strb	r3, [r7, #14]

    GPIO_RegDef_t* UsedGpioPort_Ptr = GPIOx(ChannelPort*GPIO_OFFSET);
 800026c:	7bfb      	ldrb	r3, [r7, #15]
 800026e:	029b      	lsls	r3, r3, #10
 8000270:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000274:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000278:	60bb      	str	r3, [r7, #8]

    return (DIO_CONST_1) & ((UsedGpioPort_Ptr->IDR)>>ChannelNumber);
 800027a:	68bb      	ldr	r3, [r7, #8]
 800027c:	691a      	ldr	r2, [r3, #16]
 800027e:	7bbb      	ldrb	r3, [r7, #14]
 8000280:	fa22 f303 	lsr.w	r3, r2, r3
 8000284:	b2db      	uxtb	r3, r3
 8000286:	f003 0301 	and.w	r3, r3, #1
 800028a:	b2db      	uxtb	r3, r3
}
 800028c:	4618      	mov	r0, r3
 800028e:	3714      	adds	r7, #20
 8000290:	46bd      	mov	sp, r7
 8000292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000296:	4770      	bx	lr

08000298 <Dio_WriteChannel>:
 *  @param        
 *  @param       
 *  @return      
 *********************************************************************************************************************/
void Dio_WriteChannel(Dio_ChannelType ChannelId, Dio_LevelType Level )
{
 8000298:	b480      	push	{r7}
 800029a:	b087      	sub	sp, #28
 800029c:	af00      	add	r7, sp, #0
 800029e:	4603      	mov	r3, r0
 80002a0:	460a      	mov	r2, r1
 80002a2:	71fb      	strb	r3, [r7, #7]
 80002a4:	4613      	mov	r3, r2
 80002a6:	71bb      	strb	r3, [r7, #6]
    uint8_t ChannelPort   = ChannelId/BSRR_CHANNEL;
 80002a8:	79fb      	ldrb	r3, [r7, #7]
 80002aa:	091b      	lsrs	r3, r3, #4
 80002ac:	75fb      	strb	r3, [r7, #23]
    uint8_t ChannelNumber = ChannelId%BSRR_CHANNEL;
 80002ae:	79fb      	ldrb	r3, [r7, #7]
 80002b0:	f003 030f 	and.w	r3, r3, #15
 80002b4:	75bb      	strb	r3, [r7, #22]
    GPIO_RegDef_t* UsedGpioPort_Ptr = GPIOx(ChannelPort*GPIO_OFFSET);
 80002b6:	7dfb      	ldrb	r3, [r7, #23]
 80002b8:	029b      	lsls	r3, r3, #10
 80002ba:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80002be:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80002c2:	613b      	str	r3, [r7, #16]
    uint32_t BSSR_Val=0;
 80002c4:	2300      	movs	r3, #0
 80002c6:	60fb      	str	r3, [r7, #12]

    BSSR_Val     = DIO_CONST_1 << (ChannelNumber+Level*BSRR_CHANNEL);
 80002c8:	7dba      	ldrb	r2, [r7, #22]
 80002ca:	79bb      	ldrb	r3, [r7, #6]
 80002cc:	011b      	lsls	r3, r3, #4
 80002ce:	4413      	add	r3, r2
 80002d0:	2201      	movs	r2, #1
 80002d2:	fa02 f303 	lsl.w	r3, r2, r3
 80002d6:	60fb      	str	r3, [r7, #12]
    UsedGpioPort_Ptr->BSRR= BSSR_Val;
 80002d8:	693b      	ldr	r3, [r7, #16]
 80002da:	68fa      	ldr	r2, [r7, #12]
 80002dc:	619a      	str	r2, [r3, #24]
}
 80002de:	bf00      	nop
 80002e0:	371c      	adds	r7, #28
 80002e2:	46bd      	mov	sp, r7
 80002e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e8:	4770      	bx	lr

080002ea <Dio_FlipChannel>:
 *  @param        
 *  @param       
 *  @return      
 *********************************************************************************************************************/
Dio_LevelType Dio_FlipChannel(Dio_ChannelType ChannelId)
{
 80002ea:	b480      	push	{r7}
 80002ec:	b087      	sub	sp, #28
 80002ee:	af00      	add	r7, sp, #0
 80002f0:	4603      	mov	r3, r0
 80002f2:	71fb      	strb	r3, [r7, #7]
    uint8_t ChannelPort   = ChannelId/BSRR_CHANNEL;
 80002f4:	79fb      	ldrb	r3, [r7, #7]
 80002f6:	091b      	lsrs	r3, r3, #4
 80002f8:	75fb      	strb	r3, [r7, #23]
    uint8_t ChannelNumber = ChannelId%BSRR_CHANNEL;
 80002fa:	79fb      	ldrb	r3, [r7, #7]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	75bb      	strb	r3, [r7, #22]
    GPIO_RegDef_t* UsedGpioPort_Ptr = GPIOx(ChannelPort*GPIO_OFFSET);
 8000302:	7dfb      	ldrb	r3, [r7, #23]
 8000304:	029b      	lsls	r3, r3, #10
 8000306:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800030a:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800030e:	613b      	str	r3, [r7, #16]
    uint8_t ChannelVal=0;
 8000310:	2300      	movs	r3, #0
 8000312:	73fb      	strb	r3, [r7, #15]
    uint32_t BSSR_Val=0;
 8000314:	2300      	movs	r3, #0
 8000316:	60bb      	str	r3, [r7, #8]

    ChannelVal= (DIO_CONST_1) & ((UsedGpioPort_Ptr->ODR)>>ChannelNumber);
 8000318:	693b      	ldr	r3, [r7, #16]
 800031a:	695a      	ldr	r2, [r3, #20]
 800031c:	7dbb      	ldrb	r3, [r7, #22]
 800031e:	fa22 f303 	lsr.w	r3, r2, r3
 8000322:	b2db      	uxtb	r3, r3
 8000324:	f003 0301 	and.w	r3, r3, #1
 8000328:	73fb      	strb	r3, [r7, #15]
    BSSR_Val      = DIO_CONST_1 << (ChannelNumber+ (ChannelVal)*BSRR_CHANNEL);
 800032a:	7dba      	ldrb	r2, [r7, #22]
 800032c:	7bfb      	ldrb	r3, [r7, #15]
 800032e:	011b      	lsls	r3, r3, #4
 8000330:	4413      	add	r3, r2
 8000332:	2201      	movs	r2, #1
 8000334:	fa02 f303 	lsl.w	r3, r2, r3
 8000338:	60bb      	str	r3, [r7, #8]
    UsedGpioPort_Ptr->BSRR = BSSR_Val;
 800033a:	693b      	ldr	r3, [r7, #16]
 800033c:	68ba      	ldr	r2, [r7, #8]
 800033e:	619a      	str	r2, [r3, #24]
    return ~ChannelVal;
 8000340:	7bfb      	ldrb	r3, [r7, #15]
 8000342:	43db      	mvns	r3, r3
 8000344:	b2db      	uxtb	r3, r3
}
 8000346:	4618      	mov	r0, r3
 8000348:	371c      	adds	r7, #28
 800034a:	46bd      	mov	sp, r7
 800034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000350:	4770      	bx	lr
	...

08000354 <NVIC_Init>:
* \Parameters (in) : None                     
* \Parameters (out): None                                                      
* \Return value:   : None
*******************************************************************************/
void NVIC_Init(void)
{
 8000354:	b490      	push	{r4, r7}
 8000356:	b082      	sub	sp, #8
 8000358:	af00      	add	r7, sp, #0
	uint8_t Groupriority;
	uint8_t InterruptState;
	

/*TODO Configure Grouping\SubGrouping System in Application Interrupt and Reset Control Register (AIRCR) in SCB*/
    SCB_AIRCR =  (Group);
 800035a:	4a98      	ldr	r2, [pc, #608]	; (80005bc <NVIC_Init+0x268>)
 800035c:	4b98      	ldr	r3, [pc, #608]	; (80005c0 <NVIC_Init+0x26c>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	6013      	str	r3, [r2, #0]

/*TODO : Assign Group\Subgroup priority in NVIC_PRIx Nvic and SCB_SHPRx Registers*/  
	for(NVIC_Cfg_Counter=0;NVIC_Cfg_Counter<NVIC_ACTIVATED_INT_SIZE;NVIC_Cfg_Counter++)
 8000362:	2300      	movs	r3, #0
 8000364:	71fb      	strb	r3, [r7, #7]
 8000366:	e0d2      	b.n	800050e <NVIC_Init+0x1ba>
	{	
		InterruptNumber =NVIC_Cfg[NVIC_Cfg_Counter].interruptNumber;
 8000368:	79fb      	ldrb	r3, [r7, #7]
 800036a:	4a96      	ldr	r2, [pc, #600]	; (80005c4 <NVIC_Init+0x270>)
 800036c:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8000370:	717b      	strb	r3, [r7, #5]
		SubgroupPriority=NVIC_Cfg[NVIC_Cfg_Counter].subgroupPriority;
 8000372:	79fb      	ldrb	r3, [r7, #7]
 8000374:	4a93      	ldr	r2, [pc, #588]	; (80005c4 <NVIC_Init+0x270>)
 8000376:	009b      	lsls	r3, r3, #2
 8000378:	4413      	add	r3, r2
 800037a:	789b      	ldrb	r3, [r3, #2]
 800037c:	713b      	strb	r3, [r7, #4]
		Groupriority	=NVIC_Cfg[NVIC_Cfg_Counter].groupPriority;
 800037e:	79fb      	ldrb	r3, [r7, #7]
 8000380:	4a90      	ldr	r2, [pc, #576]	; (80005c4 <NVIC_Init+0x270>)
 8000382:	009b      	lsls	r3, r3, #2
 8000384:	4413      	add	r3, r2
 8000386:	785b      	ldrb	r3, [r3, #1]
 8000388:	70fb      	strb	r3, [r7, #3]
		InterruptState  =NVIC_Cfg[NVIC_Cfg_Counter].interruptState; 
 800038a:	79fb      	ldrb	r3, [r7, #7]
 800038c:	4a8d      	ldr	r2, [pc, #564]	; (80005c4 <NVIC_Init+0x270>)
 800038e:	009b      	lsls	r3, r3, #2
 8000390:	4413      	add	r3, r2
 8000392:	78db      	ldrb	r3, [r3, #3]
 8000394:	71bb      	strb	r3, [r7, #6]
		//page 229 in f446 programming manual
		uint8_t Priority =  (SubgroupPriority) | (Groupriority) << ( (Group - BASE_GROUP) / GROUP_UNIT_DIFFERECE )  ;// 0x100 Hex  ---> 256 Decimal
 8000396:	78fa      	ldrb	r2, [r7, #3]
 8000398:	4b89      	ldr	r3, [pc, #548]	; (80005c0 <NVIC_Init+0x26c>)
 800039a:	6819      	ldr	r1, [r3, #0]
 800039c:	4b8a      	ldr	r3, [pc, #552]	; (80005c8 <NVIC_Init+0x274>)
 800039e:	440b      	add	r3, r1
 80003a0:	0a1b      	lsrs	r3, r3, #8
 80003a2:	fa02 f303 	lsl.w	r3, r2, r3
 80003a6:	b25a      	sxtb	r2, r3
 80003a8:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80003ac:	4313      	orrs	r3, r2
 80003ae:	b25b      	sxtb	r3, r3
 80003b0:	70bb      	strb	r3, [r7, #2]
		
		if( InterruptNumber < NVIC_ZERO )
 80003b2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	da5d      	bge.n	8000476 <NVIC_Init+0x122>
		{
			//Core Peripheral
			switch(InterruptNumber)
 80003ba:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80003be:	330c      	adds	r3, #12
 80003c0:	2b0b      	cmp	r3, #11
 80003c2:	f200 80a0 	bhi.w	8000506 <NVIC_Init+0x1b2>
 80003c6:	a201      	add	r2, pc, #4	; (adr r2, 80003cc <NVIC_Init+0x78>)
 80003c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003cc:	080003fd 	.word	0x080003fd
 80003d0:	08000419 	.word	0x08000419
 80003d4:	08000435 	.word	0x08000435
 80003d8:	08000507 	.word	0x08000507
 80003dc:	08000507 	.word	0x08000507
 80003e0:	08000507 	.word	0x08000507
 80003e4:	08000507 	.word	0x08000507
 80003e8:	08000451 	.word	0x08000451
 80003ec:	08000507 	.word	0x08000507
 80003f0:	08000507 	.word	0x08000507
 80003f4:	0800045b 	.word	0x0800045b
 80003f8:	08000465 	.word	0x08000465
			{
				case MemManage :
					SCB->SCB_SHPR1 = ( Priority ) << (MEMMANAGE_BITSHIFT );
 80003fc:	78bb      	ldrb	r3, [r7, #2]
 80003fe:	011a      	lsls	r2, r3, #4
 8000400:	4b72      	ldr	r3, [pc, #456]	; (80005cc <NVIC_Init+0x278>)
 8000402:	619a      	str	r2, [r3, #24]
					SCB_SHCSR->BIT.MEMFAULTENA=InterruptState;
 8000404:	4a72      	ldr	r2, [pc, #456]	; (80005d0 <NVIC_Init+0x27c>)
 8000406:	79bb      	ldrb	r3, [r7, #6]
 8000408:	f003 0301 	and.w	r3, r3, #1
 800040c:	b2d9      	uxtb	r1, r3
 800040e:	6813      	ldr	r3, [r2, #0]
 8000410:	f361 4310 	bfi	r3, r1, #16, #1
 8000414:	6013      	str	r3, [r2, #0]
					break;
 8000416:	e077      	b.n	8000508 <NVIC_Init+0x1b4>
				case BusFault  :
					SCB->SCB_SHPR1 = ( Priority ) << (BUSFAULT_BITSHIFT  );
 8000418:	78bb      	ldrb	r3, [r7, #2]
 800041a:	031a      	lsls	r2, r3, #12
 800041c:	4b6b      	ldr	r3, [pc, #428]	; (80005cc <NVIC_Init+0x278>)
 800041e:	619a      	str	r2, [r3, #24]
					SCB_SHCSR->BIT.BUSFAULTENA=InterruptState;
 8000420:	4a6b      	ldr	r2, [pc, #428]	; (80005d0 <NVIC_Init+0x27c>)
 8000422:	79bb      	ldrb	r3, [r7, #6]
 8000424:	f003 0301 	and.w	r3, r3, #1
 8000428:	b2d9      	uxtb	r1, r3
 800042a:	6813      	ldr	r3, [r2, #0]
 800042c:	f361 4351 	bfi	r3, r1, #17, #1
 8000430:	6013      	str	r3, [r2, #0]
					break;
 8000432:	e069      	b.n	8000508 <NVIC_Init+0x1b4>
				case UsageFault:
					SCB->SCB_SHPR1 = ( Priority ) << (USAGEFAULT_BITSHIFT);
 8000434:	78bb      	ldrb	r3, [r7, #2]
 8000436:	051a      	lsls	r2, r3, #20
 8000438:	4b64      	ldr	r3, [pc, #400]	; (80005cc <NVIC_Init+0x278>)
 800043a:	619a      	str	r2, [r3, #24]
					SCB_SHCSR->BIT.USGFAULTENA=InterruptState;
 800043c:	4a64      	ldr	r2, [pc, #400]	; (80005d0 <NVIC_Init+0x27c>)
 800043e:	79bb      	ldrb	r3, [r7, #6]
 8000440:	f003 0301 	and.w	r3, r3, #1
 8000444:	b2d9      	uxtb	r1, r3
 8000446:	6813      	ldr	r3, [r2, #0]
 8000448:	f361 4392 	bfi	r3, r1, #18, #1
 800044c:	6013      	str	r3, [r2, #0]
					break;
 800044e:	e05b      	b.n	8000508 <NVIC_Init+0x1b4>
				case SVC       :SCB->SCB_SHPR2 = ( Priority ) << (SVC_BITSHIFT   );break;
 8000450:	78bb      	ldrb	r3, [r7, #2]
 8000452:	071a      	lsls	r2, r3, #28
 8000454:	4b5d      	ldr	r3, [pc, #372]	; (80005cc <NVIC_Init+0x278>)
 8000456:	61da      	str	r2, [r3, #28]
 8000458:	e056      	b.n	8000508 <NVIC_Init+0x1b4>
				case PendSV    :SCB->SCB_SHPR3 = ( Priority ) << (PENDSV_BITSHIFT);break;
 800045a:	78bb      	ldrb	r3, [r7, #2]
 800045c:	051a      	lsls	r2, r3, #20
 800045e:	4b5b      	ldr	r3, [pc, #364]	; (80005cc <NVIC_Init+0x278>)
 8000460:	621a      	str	r2, [r3, #32]
 8000462:	e051      	b.n	8000508 <NVIC_Init+0x1b4>
				case SysTick   :
					SCB->SCB_SHPR3 = ( Priority ) << (SYSTICK_BITSHIFT);
 8000464:	78bb      	ldrb	r3, [r7, #2]
 8000466:	071a      	lsls	r2, r3, #28
 8000468:	4b58      	ldr	r3, [pc, #352]	; (80005cc <NVIC_Init+0x278>)
 800046a:	621a      	str	r2, [r3, #32]
					SYSTICK->STK_CTRL = InterruptState << SYSTICK_INT_EN_BITSHIFT;
 800046c:	79bb      	ldrb	r3, [r7, #6]
 800046e:	005a      	lsls	r2, r3, #1
 8000470:	4b58      	ldr	r3, [pc, #352]	; (80005d4 <NVIC_Init+0x280>)
 8000472:	601a      	str	r2, [r3, #0]
					break;
 8000474:	e048      	b.n	8000508 <NVIC_Init+0x1b4>
				default:break;
			}
		}
		else if( InterruptNumber >= 0 )
 8000476:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800047a:	2b00      	cmp	r3, #0
 800047c:	db44      	blt.n	8000508 <NVIC_Init+0x1b4>
		{
			NVIC->NVIC_IPR [ InterruptNumber   ]  = Priority << IPR_BITSHIFT ;
 800047e:	4956      	ldr	r1, [pc, #344]	; (80005d8 <NVIC_Init+0x284>)
 8000480:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000484:	78ba      	ldrb	r2, [r7, #2]
 8000486:	0112      	lsls	r2, r2, #4
 8000488:	b2d2      	uxtb	r2, r2
 800048a:	440b      	add	r3, r1
 800048c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
			NVIC->NVIC_ISER[ InterruptNumber/8 ] &= ~(NVIC_ONE << (InterruptNumber%8));
 8000490:	4a51      	ldr	r2, [pc, #324]	; (80005d8 <NVIC_Init+0x284>)
 8000492:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000496:	2b00      	cmp	r3, #0
 8000498:	da00      	bge.n	800049c <NVIC_Init+0x148>
 800049a:	3307      	adds	r3, #7
 800049c:	10db      	asrs	r3, r3, #3
 800049e:	b258      	sxtb	r0, r3
 80004a0:	4603      	mov	r3, r0
 80004a2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80004a6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80004aa:	4259      	negs	r1, r3
 80004ac:	f003 0307 	and.w	r3, r3, #7
 80004b0:	f001 0107 	and.w	r1, r1, #7
 80004b4:	bf58      	it	pl
 80004b6:	424b      	negpl	r3, r1
 80004b8:	b25b      	sxtb	r3, r3
 80004ba:	4619      	mov	r1, r3
 80004bc:	2301      	movs	r3, #1
 80004be:	408b      	lsls	r3, r1
 80004c0:	43db      	mvns	r3, r3
 80004c2:	4945      	ldr	r1, [pc, #276]	; (80005d8 <NVIC_Init+0x284>)
 80004c4:	4013      	ands	r3, r2
 80004c6:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
			NVIC->NVIC_ISER[ InterruptNumber/8 ] |= InterruptState << (InterruptNumber%8) ;
 80004ca:	4a43      	ldr	r2, [pc, #268]	; (80005d8 <NVIC_Init+0x284>)
 80004cc:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	da00      	bge.n	80004d6 <NVIC_Init+0x182>
 80004d4:	3307      	adds	r3, #7
 80004d6:	10db      	asrs	r3, r3, #3
 80004d8:	b25c      	sxtb	r4, r3
 80004da:	4623      	mov	r3, r4
 80004dc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80004e0:	79b9      	ldrb	r1, [r7, #6]
 80004e2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80004e6:	4258      	negs	r0, r3
 80004e8:	f003 0307 	and.w	r3, r3, #7
 80004ec:	f000 0007 	and.w	r0, r0, #7
 80004f0:	bf58      	it	pl
 80004f2:	4243      	negpl	r3, r0
 80004f4:	b25b      	sxtb	r3, r3
 80004f6:	fa01 f303 	lsl.w	r3, r1, r3
 80004fa:	4937      	ldr	r1, [pc, #220]	; (80005d8 <NVIC_Init+0x284>)
 80004fc:	4620      	mov	r0, r4
 80004fe:	4313      	orrs	r3, r2
 8000500:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
 8000504:	e000      	b.n	8000508 <NVIC_Init+0x1b4>
				default:break;
 8000506:	bf00      	nop
	for(NVIC_Cfg_Counter=0;NVIC_Cfg_Counter<NVIC_ACTIVATED_INT_SIZE;NVIC_Cfg_Counter++)
 8000508:	79fb      	ldrb	r3, [r7, #7]
 800050a:	3301      	adds	r3, #1
 800050c:	71fb      	strb	r3, [r7, #7]
 800050e:	79fb      	ldrb	r3, [r7, #7]
 8000510:	2b04      	cmp	r3, #4
 8000512:	f67f af29 	bls.w	8000368 <NVIC_Init+0x14>
		}
	}
    
	/*TODO : Enable\Disable based on user configurations in NVIC_ENx and SCB_Sys Registers */
	for(NVIC_Cfg_Counter=0;NVIC_Cfg_Counter<NVIC_ACTIVATED_INT_SIZE;NVIC_Cfg_Counter++)
 8000516:	2300      	movs	r3, #0
 8000518:	71fb      	strb	r3, [r7, #7]
 800051a:	e045      	b.n	80005a8 <NVIC_Init+0x254>
	{	
		InterruptNumber= NVIC_Cfg[NVIC_Cfg_Counter].interruptNumber;
 800051c:	79fb      	ldrb	r3, [r7, #7]
 800051e:	4a29      	ldr	r2, [pc, #164]	; (80005c4 <NVIC_Init+0x270>)
 8000520:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8000524:	717b      	strb	r3, [r7, #5]
		
		if(InterruptNumber>=0)
 8000526:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800052a:	2b00      	cmp	r3, #0
 800052c:	db39      	blt.n	80005a2 <NVIC_Init+0x24e>
		{
			NVIC->NVIC_ISER[ InterruptNumber/8 ] &= ~(NVIC_ONE << (InterruptNumber%8));
 800052e:	4a2a      	ldr	r2, [pc, #168]	; (80005d8 <NVIC_Init+0x284>)
 8000530:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000534:	2b00      	cmp	r3, #0
 8000536:	da00      	bge.n	800053a <NVIC_Init+0x1e6>
 8000538:	3307      	adds	r3, #7
 800053a:	10db      	asrs	r3, r3, #3
 800053c:	b258      	sxtb	r0, r3
 800053e:	4603      	mov	r3, r0
 8000540:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000544:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000548:	4259      	negs	r1, r3
 800054a:	f003 0307 	and.w	r3, r3, #7
 800054e:	f001 0107 	and.w	r1, r1, #7
 8000552:	bf58      	it	pl
 8000554:	424b      	negpl	r3, r1
 8000556:	b25b      	sxtb	r3, r3
 8000558:	4619      	mov	r1, r3
 800055a:	2301      	movs	r3, #1
 800055c:	408b      	lsls	r3, r1
 800055e:	43db      	mvns	r3, r3
 8000560:	491d      	ldr	r1, [pc, #116]	; (80005d8 <NVIC_Init+0x284>)
 8000562:	4013      	ands	r3, r2
 8000564:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
			NVIC->NVIC_ISER[ InterruptNumber/8 ] |= InterruptState << (InterruptNumber%8) ;
 8000568:	4a1b      	ldr	r2, [pc, #108]	; (80005d8 <NVIC_Init+0x284>)
 800056a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800056e:	2b00      	cmp	r3, #0
 8000570:	da00      	bge.n	8000574 <NVIC_Init+0x220>
 8000572:	3307      	adds	r3, #7
 8000574:	10db      	asrs	r3, r3, #3
 8000576:	b25c      	sxtb	r4, r3
 8000578:	4623      	mov	r3, r4
 800057a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800057e:	79b9      	ldrb	r1, [r7, #6]
 8000580:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000584:	4258      	negs	r0, r3
 8000586:	f003 0307 	and.w	r3, r3, #7
 800058a:	f000 0007 	and.w	r0, r0, #7
 800058e:	bf58      	it	pl
 8000590:	4243      	negpl	r3, r0
 8000592:	b25b      	sxtb	r3, r3
 8000594:	fa01 f303 	lsl.w	r3, r1, r3
 8000598:	490f      	ldr	r1, [pc, #60]	; (80005d8 <NVIC_Init+0x284>)
 800059a:	4620      	mov	r0, r4
 800059c:	4313      	orrs	r3, r2
 800059e:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
	for(NVIC_Cfg_Counter=0;NVIC_Cfg_Counter<NVIC_ACTIVATED_INT_SIZE;NVIC_Cfg_Counter++)
 80005a2:	79fb      	ldrb	r3, [r7, #7]
 80005a4:	3301      	adds	r3, #1
 80005a6:	71fb      	strb	r3, [r7, #7]
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	2b04      	cmp	r3, #4
 80005ac:	d9b6      	bls.n	800051c <NVIC_Init+0x1c8>
		}
	}
}
 80005ae:	bf00      	nop
 80005b0:	bf00      	nop
 80005b2:	3708      	adds	r7, #8
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bc90      	pop	{r4, r7}
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	e000ed0c 	.word	0xe000ed0c
 80005c0:	0800081c 	.word	0x0800081c
 80005c4:	08000808 	.word	0x08000808
 80005c8:	fa05fd00 	.word	0xfa05fd00
 80005cc:	e000ed00 	.word	0xe000ed00
 80005d0:	e000ed24 	.word	0xe000ed24
 80005d4:	e000e010 	.word	0xe000e010
 80005d8:	e000e100 	.word	0xe000e100

080005dc <Port_Init>:
 *  @param        
 *  @param       
 *  @return      
 *********************************************************************************************************************/
void Port_Init(Port_ConfigType* ConfigArrayOfPtrs)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b086      	sub	sp, #24
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
    uint8_t PinId,PinOutputType,PinInitialLevel,PinMode,PinInternalAttach,PinOutputSpeed;
    uint8_t PinPort;
    uint8_t PinNumber; 
    GPIO_RegDef_t* UsedGpioPort_Ptr;
    for(uint8_t i=0; i<NUM_OF_USED_PINS;i++)
 80005e4:	2300      	movs	r3, #0
 80005e6:	75fb      	strb	r3, [r7, #23]
 80005e8:	e0ab      	b.n	8000742 <Port_Init+0x166>
    {
        PinId            =ConfigArrayOfPtrs[i].pinId;
 80005ea:	7dfa      	ldrb	r2, [r7, #23]
 80005ec:	4613      	mov	r3, r2
 80005ee:	00db      	lsls	r3, r3, #3
 80005f0:	1a9b      	subs	r3, r3, r2
 80005f2:	687a      	ldr	r2, [r7, #4]
 80005f4:	4413      	add	r3, r2
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	75bb      	strb	r3, [r7, #22]
        PinMode          =ConfigArrayOfPtrs[i].pinMode;
 80005fa:	7dfa      	ldrb	r2, [r7, #23]
 80005fc:	4613      	mov	r3, r2
 80005fe:	00db      	lsls	r3, r3, #3
 8000600:	1a9b      	subs	r3, r3, r2
 8000602:	687a      	ldr	r2, [r7, #4]
 8000604:	4413      	add	r3, r2
 8000606:	78db      	ldrb	r3, [r3, #3]
 8000608:	757b      	strb	r3, [r7, #21]
        PinInternalAttach=ConfigArrayOfPtrs[i].pinInternalAttach;
 800060a:	7dfa      	ldrb	r2, [r7, #23]
 800060c:	4613      	mov	r3, r2
 800060e:	00db      	lsls	r3, r3, #3
 8000610:	1a9b      	subs	r3, r3, r2
 8000612:	687a      	ldr	r2, [r7, #4]
 8000614:	4413      	add	r3, r2
 8000616:	795b      	ldrb	r3, [r3, #5]
 8000618:	753b      	strb	r3, [r7, #20]
        PinOutputSpeed   =ConfigArrayOfPtrs[i].pinOutputSpeed;
 800061a:	7dfa      	ldrb	r2, [r7, #23]
 800061c:	4613      	mov	r3, r2
 800061e:	00db      	lsls	r3, r3, #3
 8000620:	1a9b      	subs	r3, r3, r2
 8000622:	687a      	ldr	r2, [r7, #4]
 8000624:	4413      	add	r3, r2
 8000626:	799b      	ldrb	r3, [r3, #6]
 8000628:	74fb      	strb	r3, [r7, #19]
        PinOutputType    =ConfigArrayOfPtrs[i].OutputType;
 800062a:	7dfa      	ldrb	r2, [r7, #23]
 800062c:	4613      	mov	r3, r2
 800062e:	00db      	lsls	r3, r3, #3
 8000630:	1a9b      	subs	r3, r3, r2
 8000632:	687a      	ldr	r2, [r7, #4]
 8000634:	4413      	add	r3, r2
 8000636:	789b      	ldrb	r3, [r3, #2]
 8000638:	74bb      	strb	r3, [r7, #18]

        PinPort          = PinId/PIN_PORT_CONST;
 800063a:	7dbb      	ldrb	r3, [r7, #22]
 800063c:	091b      	lsrs	r3, r3, #4
 800063e:	747b      	strb	r3, [r7, #17]
        PinNumber        = PinId%PIN_PORT_CONST; 
 8000640:	7dbb      	ldrb	r3, [r7, #22]
 8000642:	f003 030f 	and.w	r3, r3, #15
 8000646:	743b      	strb	r3, [r7, #16]

        UsedGpioPort_Ptr = GPIOx(PinPort*GPIO_OFFSET);
 8000648:	7c7b      	ldrb	r3, [r7, #17]
 800064a:	029b      	lsls	r3, r3, #10
 800064c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000650:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000654:	60fb      	str	r3, [r7, #12]
        /*Pin mode*/
        UsedGpioPort_Ptr->MODER &=~(PORT_CONST_3<< (PORT_CONST_2*PinNumber));
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	7c3a      	ldrb	r2, [r7, #16]
 800065c:	0052      	lsls	r2, r2, #1
 800065e:	2103      	movs	r1, #3
 8000660:	fa01 f202 	lsl.w	r2, r1, r2
 8000664:	43d2      	mvns	r2, r2
 8000666:	401a      	ands	r2, r3
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	601a      	str	r2, [r3, #0]
        UsedGpioPort_Ptr->MODER |=PinMode<< (PORT_CONST_2*PinNumber);
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	7d79      	ldrb	r1, [r7, #21]
 8000672:	7c3a      	ldrb	r2, [r7, #16]
 8000674:	0052      	lsls	r2, r2, #1
 8000676:	fa01 f202 	lsl.w	r2, r1, r2
 800067a:	431a      	orrs	r2, r3
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	601a      	str	r2, [r3, #0]
        /*Pin Pull up or pull down*/
        UsedGpioPort_Ptr->PUPDR &=~(PORT_CONST_3   <<(PORT_CONST_2*PinNumber));
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	68db      	ldr	r3, [r3, #12]
 8000684:	7c3a      	ldrb	r2, [r7, #16]
 8000686:	0052      	lsls	r2, r2, #1
 8000688:	2103      	movs	r1, #3
 800068a:	fa01 f202 	lsl.w	r2, r1, r2
 800068e:	43d2      	mvns	r2, r2
 8000690:	401a      	ands	r2, r3
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	60da      	str	r2, [r3, #12]
        UsedGpioPort_Ptr->PUPDR |=PinInternalAttach<<(PORT_CONST_2*PinNumber);
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	68db      	ldr	r3, [r3, #12]
 800069a:	7d39      	ldrb	r1, [r7, #20]
 800069c:	7c3a      	ldrb	r2, [r7, #16]
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	fa01 f202 	lsl.w	r2, r1, r2
 80006a4:	431a      	orrs	r2, r3
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	60da      	str	r2, [r3, #12]
        
        switch(PinMode)
 80006aa:	7d7b      	ldrb	r3, [r7, #21]
 80006ac:	2b03      	cmp	r3, #3
 80006ae:	d844      	bhi.n	800073a <Port_Init+0x15e>
 80006b0:	a201      	add	r2, pc, #4	; (adr r2, 80006b8 <Port_Init+0xdc>)
 80006b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006b6:	bf00      	nop
 80006b8:	0800073b 	.word	0x0800073b
 80006bc:	080006c9 	.word	0x080006c9
 80006c0:	0800073b 	.word	0x0800073b
 80006c4:	0800073b 	.word	0x0800073b
        {
            case Port_PIN_MODE_INPUT: /*Do Nothing*/break;
            case Port_PIN_MODE_GENERAL_PURPOSE_OUTPUT:
                /*Pin Output type*/
                UsedGpioPort_Ptr->OTYPER&=~(PORT_CONST_1<< (PORT_CONST_2*PinNumber));
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	685b      	ldr	r3, [r3, #4]
 80006cc:	7c3a      	ldrb	r2, [r7, #16]
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	2101      	movs	r1, #1
 80006d2:	fa01 f202 	lsl.w	r2, r1, r2
 80006d6:	43d2      	mvns	r2, r2
 80006d8:	401a      	ands	r2, r3
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	605a      	str	r2, [r3, #4]
                UsedGpioPort_Ptr->OTYPER|= (PinOutputType<<(PORT_CONST_2*PinNumber));
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	685b      	ldr	r3, [r3, #4]
 80006e2:	7cb9      	ldrb	r1, [r7, #18]
 80006e4:	7c3a      	ldrb	r2, [r7, #16]
 80006e6:	0052      	lsls	r2, r2, #1
 80006e8:	fa01 f202 	lsl.w	r2, r1, r2
 80006ec:	431a      	orrs	r2, r3
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	605a      	str	r2, [r3, #4]
                /*Set initial value*/
                PinInitialLevel  =ConfigArrayOfPtrs[i].pinInitialLevel;
 80006f2:	7dfa      	ldrb	r2, [r7, #23]
 80006f4:	4613      	mov	r3, r2
 80006f6:	00db      	lsls	r3, r3, #3
 80006f8:	1a9b      	subs	r3, r3, r2
 80006fa:	687a      	ldr	r2, [r7, #4]
 80006fc:	4413      	add	r3, r2
 80006fe:	791b      	ldrb	r3, [r3, #4]
 8000700:	72fb      	strb	r3, [r7, #11]
                Dio_WriteChannel(PinId,PinInitialLevel);
 8000702:	7afa      	ldrb	r2, [r7, #11]
 8000704:	7dbb      	ldrb	r3, [r7, #22]
 8000706:	4611      	mov	r1, r2
 8000708:	4618      	mov	r0, r3
 800070a:	f7ff fdc5 	bl	8000298 <Dio_WriteChannel>
                /*Pin Speed*/
                UsedGpioPort_Ptr->OSPEEDR &=~(PORT_CONST_3<< (PORT_CONST_2*PinNumber));
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	689b      	ldr	r3, [r3, #8]
 8000712:	7c3a      	ldrb	r2, [r7, #16]
 8000714:	0052      	lsls	r2, r2, #1
 8000716:	2103      	movs	r1, #3
 8000718:	fa01 f202 	lsl.w	r2, r1, r2
 800071c:	43d2      	mvns	r2, r2
 800071e:	401a      	ands	r2, r3
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	609a      	str	r2, [r3, #8]
                UsedGpioPort_Ptr->OSPEEDR |=PinOutputSpeed<< (PORT_CONST_2*PinNumber);
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	689b      	ldr	r3, [r3, #8]
 8000728:	7cf9      	ldrb	r1, [r7, #19]
 800072a:	7c3a      	ldrb	r2, [r7, #16]
 800072c:	0052      	lsls	r2, r2, #1
 800072e:	fa01 f202 	lsl.w	r2, r1, r2
 8000732:	431a      	orrs	r2, r3
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	609a      	str	r2, [r3, #8]
                break;
 8000738:	e000      	b.n	800073c <Port_Init+0x160>
            case Port_PIN_MODE_ALTERNATE_FUNCTION: /*Not Available*/ break;
            case Port_PIN_MODE_ANALOG:             /*Not Available*/ break;
            default:break;
 800073a:	bf00      	nop
    for(uint8_t i=0; i<NUM_OF_USED_PINS;i++)
 800073c:	7dfb      	ldrb	r3, [r7, #23]
 800073e:	3301      	adds	r3, #1
 8000740:	75fb      	strb	r3, [r7, #23]
 8000742:	7dfb      	ldrb	r3, [r7, #23]
 8000744:	2b04      	cmp	r3, #4
 8000746:	f67f af50 	bls.w	80005ea <Port_Init+0xe>
        }


    }

}
 800074a:	bf00      	nop
 800074c:	bf00      	nop
 800074e:	3718      	adds	r7, #24
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}

08000754 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000754:	480d      	ldr	r0, [pc, #52]	; (800078c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000756:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000758:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800075c:	480c      	ldr	r0, [pc, #48]	; (8000790 <LoopForever+0x6>)
  ldr r1, =_edata
 800075e:	490d      	ldr	r1, [pc, #52]	; (8000794 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000760:	4a0d      	ldr	r2, [pc, #52]	; (8000798 <LoopForever+0xe>)
  movs r3, #0
 8000762:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000764:	e002      	b.n	800076c <LoopCopyDataInit>

08000766 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000766:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000768:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800076a:	3304      	adds	r3, #4

0800076c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800076c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800076e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000770:	d3f9      	bcc.n	8000766 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000772:	4a0a      	ldr	r2, [pc, #40]	; (800079c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000774:	4c0a      	ldr	r4, [pc, #40]	; (80007a0 <LoopForever+0x16>)
  movs r3, #0
 8000776:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000778:	e001      	b.n	800077e <LoopFillZerobss>

0800077a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800077a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800077c:	3204      	adds	r2, #4

0800077e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800077e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000780:	d3fb      	bcc.n	800077a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000782:	f000 f811 	bl	80007a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000786:	f7ff fd3d 	bl	8000204 <main>

0800078a <LoopForever>:

LoopForever:
    b LoopForever
 800078a:	e7fe      	b.n	800078a <LoopForever>
  ldr   r0, =_estack
 800078c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000790:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000794:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8000798:	08000828 	.word	0x08000828
  ldr r2, =_sbss
 800079c:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 80007a0:	20000040 	.word	0x20000040

080007a4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007a4:	e7fe      	b.n	80007a4 <ADC_IRQHandler>
	...

080007a8 <__libc_init_array>:
 80007a8:	b570      	push	{r4, r5, r6, lr}
 80007aa:	4d0d      	ldr	r5, [pc, #52]	; (80007e0 <__libc_init_array+0x38>)
 80007ac:	4c0d      	ldr	r4, [pc, #52]	; (80007e4 <__libc_init_array+0x3c>)
 80007ae:	1b64      	subs	r4, r4, r5
 80007b0:	10a4      	asrs	r4, r4, #2
 80007b2:	2600      	movs	r6, #0
 80007b4:	42a6      	cmp	r6, r4
 80007b6:	d109      	bne.n	80007cc <__libc_init_array+0x24>
 80007b8:	4d0b      	ldr	r5, [pc, #44]	; (80007e8 <__libc_init_array+0x40>)
 80007ba:	4c0c      	ldr	r4, [pc, #48]	; (80007ec <__libc_init_array+0x44>)
 80007bc:	f000 f818 	bl	80007f0 <_init>
 80007c0:	1b64      	subs	r4, r4, r5
 80007c2:	10a4      	asrs	r4, r4, #2
 80007c4:	2600      	movs	r6, #0
 80007c6:	42a6      	cmp	r6, r4
 80007c8:	d105      	bne.n	80007d6 <__libc_init_array+0x2e>
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80007d0:	4798      	blx	r3
 80007d2:	3601      	adds	r6, #1
 80007d4:	e7ee      	b.n	80007b4 <__libc_init_array+0xc>
 80007d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80007da:	4798      	blx	r3
 80007dc:	3601      	adds	r6, #1
 80007de:	e7f2      	b.n	80007c6 <__libc_init_array+0x1e>
 80007e0:	08000820 	.word	0x08000820
 80007e4:	08000820 	.word	0x08000820
 80007e8:	08000820 	.word	0x08000820
 80007ec:	08000824 	.word	0x08000824

080007f0 <_init>:
 80007f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007f2:	bf00      	nop
 80007f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007f6:	bc08      	pop	{r3}
 80007f8:	469e      	mov	lr, r3
 80007fa:	4770      	bx	lr

080007fc <_fini>:
 80007fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007fe:	bf00      	nop
 8000800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000802:	bc08      	pop	{r3}
 8000804:	469e      	mov	lr, r3
 8000806:	4770      	bx	lr
