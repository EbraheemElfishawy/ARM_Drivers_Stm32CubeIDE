
FWD_Internship.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c3c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08000e00  08000e00  00010e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000e44  08000e44  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08000e44  08000e44  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e44  08000e44  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e44  08000e44  00010e44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000e48  08000e48  00010e48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08000e4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000024  08000e70  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000048  08000e70  00020048  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000364c  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000915  00000000  00000000  000236a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000180  00000000  00000000  00023fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000e0  00000000  00000000  00024138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001906  00000000  00000000  00024218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002aad  00000000  00000000  00025b1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00006f5a  00000000  00000000  000285cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0002f525  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000348  00000000  00000000  0002f578  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000024 	.word	0x20000024
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000de8 	.word	0x08000de8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000028 	.word	0x20000028
 8000200:	08000de8 	.word	0x08000de8

08000204 <delay_ms>:
extern Port_ConfigType AllPinConfigs[NUM_OF_USED_PINS];
extern const Gpt_ConfigType    Gpt_Configs;
uint32_t Counter=0;
volatile uint16_t i=0;
void delay_ms(uint32_t delay)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b084      	sub	sp, #16
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
	uint32_t Current = Gpt_GetTimeRemaining(GPT_TIMER_CHANNEL_2);
 800020c:	2002      	movs	r0, #2
 800020e:	f000 f9e9 	bl	80005e4 <Gpt_GetTimeRemaining>
 8000212:	60f8      	str	r0, [r7, #12]
	while((  Gpt_GetTimeRemaining(GPT_TIMER_CHANNEL_2) -Current ) < (delay*16000) );
 8000214:	bf00      	nop
 8000216:	2002      	movs	r0, #2
 8000218:	f000 f9e4 	bl	80005e4 <Gpt_GetTimeRemaining>
 800021c:	4602      	mov	r2, r0
 800021e:	68fb      	ldr	r3, [r7, #12]
 8000220:	1ad2      	subs	r2, r2, r3
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
 8000228:	fb01 f303 	mul.w	r3, r1, r3
 800022c:	429a      	cmp	r2, r3
 800022e:	d3f2      	bcc.n	8000216 <delay_ms+0x12>
}
 8000230:	bf00      	nop
 8000232:	bf00      	nop
 8000234:	3710      	adds	r7, #16
 8000236:	46bd      	mov	sp, r7
 8000238:	bd80      	pop	{r7, pc}
	...

0800023c <main>:
int main()
{
 800023c:	b580      	push	{r7, lr}
 800023e:	af00      	add	r7, sp, #0
    NVIC_Init();
 8000240:	f000 fb78 	bl	8000934 <NVIC_Init>
    RCC->RCC_AHB1ENR |=(1<<0);/*GPIOAEN*/
 8000244:	4b19      	ldr	r3, [pc, #100]	; (80002ac <main+0x70>)
 8000246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000248:	4a18      	ldr	r2, [pc, #96]	; (80002ac <main+0x70>)
 800024a:	f043 0301 	orr.w	r3, r3, #1
 800024e:	6313      	str	r3, [r2, #48]	; 0x30
    RCC->RCC_APB1ENR |=(1<<0);/*TIM2EN*/
 8000250:	4b16      	ldr	r3, [pc, #88]	; (80002ac <main+0x70>)
 8000252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000254:	4a15      	ldr	r2, [pc, #84]	; (80002ac <main+0x70>)
 8000256:	f043 0301 	orr.w	r3, r3, #1
 800025a:	6413      	str	r3, [r2, #64]	; 0x40
//    RCC->RCC_APB1ENR |=(1<<2);/*TIM4EN*/
//    RCC->RCC_APB1ENR |=(1<<2);/*TIM4EN*/
//    RCC->RCC_APB2ENR |=(1<<3);/*TIM5EN*/
//    RCC->RCC_APB2ENR |=(1<<5);/*TIM7EN*/
    Port_Init(&AllPinConfigs);
 800025c:	4814      	ldr	r0, [pc, #80]	; (80002b0 <main+0x74>)
 800025e:	f000 fcb9 	bl	8000bd4 <Port_Init>
    Gpt_Init(&Gpt_Configs);
 8000262:	4814      	ldr	r0, [pc, #80]	; (80002b4 <main+0x78>)
 8000264:	f000 f8ba 	bl	80003dc <Gpt_Init>
    Dio_ReadChannel(Dio_CHANNEL_PA5);
 8000268:	2005      	movs	r0, #5
 800026a:	f000 f837 	bl	80002dc <Dio_ReadChannel>
	Gpt_EnableNotification(GPT_TIMER_CHANNEL_15);
 800026e:	200f      	movs	r0, #15
 8000270:	f000 fad2 	bl	8000818 <Gpt_EnableNotification>
	Gpt_EnableNotification(GPT_TIMER_CHANNEL_2);
 8000274:	2002      	movs	r0, #2
 8000276:	f000 facf 	bl	8000818 <Gpt_EnableNotification>
    //Gpt_StartTimer(GPT_TIMER_CHANNEL_4, 1000000);
	Gpt_StartTimer(GPT_TIMER_CHANNEL_2, 100);
 800027a:	2164      	movs	r1, #100	; 0x64
 800027c:	2002      	movs	r0, #2
 800027e:	f000 fa37 	bl	80006f0 <Gpt_StartTimer>
    while(1)
    {
    	Counter=Gpt_GetTimeRemaining(GPT_TIMER_CHANNEL_2);
 8000282:	2002      	movs	r0, #2
 8000284:	f000 f9ae 	bl	80005e4 <Gpt_GetTimeRemaining>
 8000288:	4603      	mov	r3, r0
 800028a:	4a0b      	ldr	r2, [pc, #44]	; (80002b8 <main+0x7c>)
 800028c:	6013      	str	r3, [r2, #0]
    		Dio_FlipChannel(Dio_CHANNEL_PA5);
 800028e:	2005      	movs	r0, #5
 8000290:	f000 f86f 	bl	8000372 <Dio_FlipChannel>
    		delay_ms(500);
 8000294:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000298:	f7ff ffb4 	bl	8000204 <delay_ms>
    		i++;
 800029c:	4b07      	ldr	r3, [pc, #28]	; (80002bc <main+0x80>)
 800029e:	881b      	ldrh	r3, [r3, #0]
 80002a0:	b29b      	uxth	r3, r3
 80002a2:	3301      	adds	r3, #1
 80002a4:	b29a      	uxth	r2, r3
 80002a6:	4b05      	ldr	r3, [pc, #20]	; (80002bc <main+0x80>)
 80002a8:	801a      	strh	r2, [r3, #0]
    	Counter=Gpt_GetTimeRemaining(GPT_TIMER_CHANNEL_2);
 80002aa:	e7ea      	b.n	8000282 <main+0x46>
 80002ac:	40023800 	.word	0x40023800
 80002b0:	20000000 	.word	0x20000000
 80002b4:	08000e30 	.word	0x08000e30
 80002b8:	20000040 	.word	0x20000040
 80002bc:	20000044 	.word	0x20000044

080002c0 <SysTick_Handler>:
    }
} 
void SysTick_Handler(void)
{
 80002c0:	b480      	push	{r7}
 80002c2:	af00      	add	r7, sp, #0
	//Dio_FlipChannel(Dio_CHANNEL_PA5);
}
 80002c4:	bf00      	nop
 80002c6:	46bd      	mov	sp, r7
 80002c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002cc:	4770      	bx	lr

080002ce <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
 80002ce:	b580      	push	{r7, lr}
 80002d0:	af00      	add	r7, sp, #0
	Dio_FlipChannel(Dio_CHANNEL_PA5);
 80002d2:	2005      	movs	r0, #5
 80002d4:	f000 f84d 	bl	8000372 <Dio_FlipChannel>
}
 80002d8:	bf00      	nop
 80002da:	bd80      	pop	{r7, pc}

080002dc <Dio_ReadChannel>:
 *  @usage       
 *  @param   ChannelId     
 *  @return      
 *********************************************************************************************************************/
Dio_LevelType Dio_ReadChannel(Dio_ChannelType ChannelId)
{
 80002dc:	b480      	push	{r7}
 80002de:	b085      	sub	sp, #20
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	4603      	mov	r3, r0
 80002e4:	71fb      	strb	r3, [r7, #7]
    uint8_t ChannelPort   = ChannelId/BSRR_CHANNEL;
 80002e6:	79fb      	ldrb	r3, [r7, #7]
 80002e8:	091b      	lsrs	r3, r3, #4
 80002ea:	73fb      	strb	r3, [r7, #15]
    uint8_t ChannelNumber = ChannelId%BSRR_CHANNEL;
 80002ec:	79fb      	ldrb	r3, [r7, #7]
 80002ee:	f003 030f 	and.w	r3, r3, #15
 80002f2:	73bb      	strb	r3, [r7, #14]

    GPIO_RegDef_t* UsedGpioPort_Ptr = GPIOx(ChannelPort*GPIO_OFFSET);
 80002f4:	7bfb      	ldrb	r3, [r7, #15]
 80002f6:	029b      	lsls	r3, r3, #10
 80002f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80002fc:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000300:	60bb      	str	r3, [r7, #8]

    return (DIO_CONST_1) & ((UsedGpioPort_Ptr->IDR)>>ChannelNumber);
 8000302:	68bb      	ldr	r3, [r7, #8]
 8000304:	691a      	ldr	r2, [r3, #16]
 8000306:	7bbb      	ldrb	r3, [r7, #14]
 8000308:	fa22 f303 	lsr.w	r3, r2, r3
 800030c:	b2db      	uxtb	r3, r3
 800030e:	f003 0301 	and.w	r3, r3, #1
 8000312:	b2db      	uxtb	r3, r3
}
 8000314:	4618      	mov	r0, r3
 8000316:	3714      	adds	r7, #20
 8000318:	46bd      	mov	sp, r7
 800031a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031e:	4770      	bx	lr

08000320 <Dio_WriteChannel>:
 *  @param        
 *  @param       
 *  @return      
 *********************************************************************************************************************/
void Dio_WriteChannel(Dio_ChannelType ChannelId, Dio_LevelType Level )
{
 8000320:	b480      	push	{r7}
 8000322:	b087      	sub	sp, #28
 8000324:	af00      	add	r7, sp, #0
 8000326:	4603      	mov	r3, r0
 8000328:	460a      	mov	r2, r1
 800032a:	71fb      	strb	r3, [r7, #7]
 800032c:	4613      	mov	r3, r2
 800032e:	71bb      	strb	r3, [r7, #6]
    uint8_t ChannelPort   = ChannelId/BSRR_CHANNEL;
 8000330:	79fb      	ldrb	r3, [r7, #7]
 8000332:	091b      	lsrs	r3, r3, #4
 8000334:	75fb      	strb	r3, [r7, #23]
    uint8_t ChannelNumber = ChannelId%BSRR_CHANNEL;
 8000336:	79fb      	ldrb	r3, [r7, #7]
 8000338:	f003 030f 	and.w	r3, r3, #15
 800033c:	75bb      	strb	r3, [r7, #22]
    GPIO_RegDef_t* UsedGpioPort_Ptr = GPIOx(ChannelPort*GPIO_OFFSET);
 800033e:	7dfb      	ldrb	r3, [r7, #23]
 8000340:	029b      	lsls	r3, r3, #10
 8000342:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000346:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800034a:	613b      	str	r3, [r7, #16]
    uint32_t BSSR_Val=0;
 800034c:	2300      	movs	r3, #0
 800034e:	60fb      	str	r3, [r7, #12]

    BSSR_Val     = DIO_CONST_1 << (ChannelNumber+Level*BSRR_CHANNEL);
 8000350:	7dba      	ldrb	r2, [r7, #22]
 8000352:	79bb      	ldrb	r3, [r7, #6]
 8000354:	011b      	lsls	r3, r3, #4
 8000356:	4413      	add	r3, r2
 8000358:	2201      	movs	r2, #1
 800035a:	fa02 f303 	lsl.w	r3, r2, r3
 800035e:	60fb      	str	r3, [r7, #12]
    UsedGpioPort_Ptr->BSRR= BSSR_Val;
 8000360:	693b      	ldr	r3, [r7, #16]
 8000362:	68fa      	ldr	r2, [r7, #12]
 8000364:	619a      	str	r2, [r3, #24]
}
 8000366:	bf00      	nop
 8000368:	371c      	adds	r7, #28
 800036a:	46bd      	mov	sp, r7
 800036c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000370:	4770      	bx	lr

08000372 <Dio_FlipChannel>:
 *  @param        
 *  @param       
 *  @return      
 *********************************************************************************************************************/
Dio_LevelType Dio_FlipChannel(Dio_ChannelType ChannelId)
{
 8000372:	b480      	push	{r7}
 8000374:	b087      	sub	sp, #28
 8000376:	af00      	add	r7, sp, #0
 8000378:	4603      	mov	r3, r0
 800037a:	71fb      	strb	r3, [r7, #7]
    uint8_t ChannelPort   = ChannelId/BSRR_CHANNEL;
 800037c:	79fb      	ldrb	r3, [r7, #7]
 800037e:	091b      	lsrs	r3, r3, #4
 8000380:	75fb      	strb	r3, [r7, #23]
    uint8_t ChannelNumber = ChannelId%BSRR_CHANNEL;
 8000382:	79fb      	ldrb	r3, [r7, #7]
 8000384:	f003 030f 	and.w	r3, r3, #15
 8000388:	75bb      	strb	r3, [r7, #22]
    GPIO_RegDef_t* UsedGpioPort_Ptr = GPIOx(ChannelPort*GPIO_OFFSET);
 800038a:	7dfb      	ldrb	r3, [r7, #23]
 800038c:	029b      	lsls	r3, r3, #10
 800038e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000392:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000396:	613b      	str	r3, [r7, #16]
    uint8_t ChannelVal=0;
 8000398:	2300      	movs	r3, #0
 800039a:	73fb      	strb	r3, [r7, #15]
    uint32_t BSSR_Val=0;
 800039c:	2300      	movs	r3, #0
 800039e:	60bb      	str	r3, [r7, #8]

    ChannelVal= (DIO_CONST_1) & ((UsedGpioPort_Ptr->ODR)>>ChannelNumber);
 80003a0:	693b      	ldr	r3, [r7, #16]
 80003a2:	695a      	ldr	r2, [r3, #20]
 80003a4:	7dbb      	ldrb	r3, [r7, #22]
 80003a6:	fa22 f303 	lsr.w	r3, r2, r3
 80003aa:	b2db      	uxtb	r3, r3
 80003ac:	f003 0301 	and.w	r3, r3, #1
 80003b0:	73fb      	strb	r3, [r7, #15]
    BSSR_Val      = DIO_CONST_1 << (ChannelNumber+ (ChannelVal)*BSRR_CHANNEL);
 80003b2:	7dba      	ldrb	r2, [r7, #22]
 80003b4:	7bfb      	ldrb	r3, [r7, #15]
 80003b6:	011b      	lsls	r3, r3, #4
 80003b8:	4413      	add	r3, r2
 80003ba:	2201      	movs	r2, #1
 80003bc:	fa02 f303 	lsl.w	r3, r2, r3
 80003c0:	60bb      	str	r3, [r7, #8]
    UsedGpioPort_Ptr->BSRR = BSSR_Val;
 80003c2:	693b      	ldr	r3, [r7, #16]
 80003c4:	68ba      	ldr	r2, [r7, #8]
 80003c6:	619a      	str	r2, [r3, #24]
    return ~ChannelVal;
 80003c8:	7bfb      	ldrb	r3, [r7, #15]
 80003ca:	43db      	mvns	r3, r3
 80003cc:	b2db      	uxtb	r3, r3
}
 80003ce:	4618      	mov	r0, r3
 80003d0:	371c      	adds	r7, #28
 80003d2:	46bd      	mov	sp, r7
 80003d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d8:	4770      	bx	lr
	...

080003dc <Gpt_Init>:
*  @retval             : None
*  Description         : Initializes the GPT driver.
*********************************************************************************************************************** 
*/
void Gpt_Init(const Gpt_ConfigType *CfgPtr)
{
 80003dc:	b480      	push	{r7}
 80003de:	b08d      	sub	sp, #52	; 0x34
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
    uint8_t               ChannelsCount =CfgPtr->GptChannelCount;
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	685b      	ldr	r3, [r3, #4]
 80003e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    Gpt_ChannelConfigType* ChannelCfgPtr=CfgPtr->GptChannelCfgPtr;
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	627b      	str	r3, [r7, #36]	; 0x24
    Gpt_ChannelModeType  ChannelMode;
    Gpt_NotifyType       NotificationFn;
    uint8_t              Prescale;

    TIM_RegDef_t*   UsedTimerRegSet;
    for(uint8_t i=0; i<ChannelsCount;i++)
 80003f2:	2300      	movs	r3, #0
 80003f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80003f8:	e0c9      	b.n	800058e <Gpt_Init+0x1b2>
    {
        ChannelId           =ChannelCfgPtr[i].GptChannelId;
 80003fa:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80003fe:	4613      	mov	r3, r2
 8000400:	005b      	lsls	r3, r3, #1
 8000402:	4413      	add	r3, r2
 8000404:	00db      	lsls	r3, r3, #3
 8000406:	461a      	mov	r2, r3
 8000408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800040a:	4413      	add	r3, r2
 800040c:	781b      	ldrb	r3, [r3, #0]
 800040e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        ChannelTickFrequency=ChannelCfgPtr[i].GptChannelTickFrequency;
 8000412:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8000416:	4613      	mov	r3, r2
 8000418:	005b      	lsls	r3, r3, #1
 800041a:	4413      	add	r3, r2
 800041c:	00db      	lsls	r3, r3, #3
 800041e:	461a      	mov	r2, r3
 8000420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000422:	4413      	add	r3, r2
 8000424:	685b      	ldr	r3, [r3, #4]
 8000426:	61fb      	str	r3, [r7, #28]
        ChannelTickValueMax =ChannelCfgPtr[i].GptChannelTickValueMax;
 8000428:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800042c:	4613      	mov	r3, r2
 800042e:	005b      	lsls	r3, r3, #1
 8000430:	4413      	add	r3, r2
 8000432:	00db      	lsls	r3, r3, #3
 8000434:	461a      	mov	r2, r3
 8000436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000438:	4413      	add	r3, r2
 800043a:	689b      	ldr	r3, [r3, #8]
 800043c:	61bb      	str	r3, [r7, #24]
        ChannelMode         =ChannelCfgPtr[i].GptChannelMode;
 800043e:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8000442:	4613      	mov	r3, r2
 8000444:	005b      	lsls	r3, r3, #1
 8000446:	4413      	add	r3, r2
 8000448:	00db      	lsls	r3, r3, #3
 800044a:	461a      	mov	r2, r3
 800044c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800044e:	4413      	add	r3, r2
 8000450:	7b1b      	ldrb	r3, [r3, #12]
 8000452:	75fb      	strb	r3, [r7, #23]
        NotificationFn      =ChannelCfgPtr[i].GptNotificationFn;
 8000454:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8000458:	4613      	mov	r3, r2
 800045a:	005b      	lsls	r3, r3, #1
 800045c:	4413      	add	r3, r2
 800045e:	00db      	lsls	r3, r3, #3
 8000460:	461a      	mov	r2, r3
 8000462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000464:	4413      	add	r3, r2
 8000466:	691b      	ldr	r3, [r3, #16]
 8000468:	613b      	str	r3, [r7, #16]
        Prescale            =ChannelCfgPtr[i].GptPrescale;
 800046a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800046e:	4613      	mov	r3, r2
 8000470:	005b      	lsls	r3, r3, #1
 8000472:	4413      	add	r3, r2
 8000474:	00db      	lsls	r3, r3, #3
 8000476:	461a      	mov	r2, r3
 8000478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800047a:	4413      	add	r3, r2
 800047c:	8a9b      	ldrh	r3, [r3, #20]
 800047e:	73fb      	strb	r3, [r7, #15]
        /************/
        switch(ChannelId)
 8000480:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000484:	3b01      	subs	r3, #1
 8000486:	2b0e      	cmp	r3, #14
 8000488:	d84b      	bhi.n	8000522 <Gpt_Init+0x146>
 800048a:	a201      	add	r2, pc, #4	; (adr r2, 8000490 <Gpt_Init+0xb4>)
 800048c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000490:	080004cd 	.word	0x080004cd
 8000494:	080004d3 	.word	0x080004d3
 8000498:	080004db 	.word	0x080004db
 800049c:	080004e1 	.word	0x080004e1
 80004a0:	080004e7 	.word	0x080004e7
 80004a4:	080004ed 	.word	0x080004ed
 80004a8:	080004f3 	.word	0x080004f3
 80004ac:	080004f9 	.word	0x080004f9
 80004b0:	080004ff 	.word	0x080004ff
 80004b4:	08000505 	.word	0x08000505
 80004b8:	0800050b 	.word	0x0800050b
 80004bc:	08000511 	.word	0x08000511
 80004c0:	08000517 	.word	0x08000517
 80004c4:	0800051d 	.word	0x0800051d
 80004c8:	08000523 	.word	0x08000523
        {
            case GPT_TIMER_CHANNEL_1 : UsedTimerRegSet =TIM1 ;break;
 80004cc:	4b37      	ldr	r3, [pc, #220]	; (80005ac <Gpt_Init+0x1d0>)
 80004ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80004d0:	e028      	b.n	8000524 <Gpt_Init+0x148>
            case GPT_TIMER_CHANNEL_2 : UsedTimerRegSet =TIM2 ;break;
 80004d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80004d8:	e024      	b.n	8000524 <Gpt_Init+0x148>
            case GPT_TIMER_CHANNEL_3 : UsedTimerRegSet =TIM3 ;break;
 80004da:	4b35      	ldr	r3, [pc, #212]	; (80005b0 <Gpt_Init+0x1d4>)
 80004dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80004de:	e021      	b.n	8000524 <Gpt_Init+0x148>
            case GPT_TIMER_CHANNEL_4 : UsedTimerRegSet =TIM4 ;break;
 80004e0:	4b34      	ldr	r3, [pc, #208]	; (80005b4 <Gpt_Init+0x1d8>)
 80004e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80004e4:	e01e      	b.n	8000524 <Gpt_Init+0x148>
            case GPT_TIMER_CHANNEL_5 : UsedTimerRegSet =TIM5 ;break;
 80004e6:	4b34      	ldr	r3, [pc, #208]	; (80005b8 <Gpt_Init+0x1dc>)
 80004e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80004ea:	e01b      	b.n	8000524 <Gpt_Init+0x148>
            case GPT_TIMER_CHANNEL_6 : UsedTimerRegSet =TIM6 ;break;
 80004ec:	4b33      	ldr	r3, [pc, #204]	; (80005bc <Gpt_Init+0x1e0>)
 80004ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80004f0:	e018      	b.n	8000524 <Gpt_Init+0x148>
            case GPT_TIMER_CHANNEL_7 : UsedTimerRegSet =TIM7 ;break;
 80004f2:	4b33      	ldr	r3, [pc, #204]	; (80005c0 <Gpt_Init+0x1e4>)
 80004f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80004f6:	e015      	b.n	8000524 <Gpt_Init+0x148>
            case GPT_TIMER_CHANNEL_8 : UsedTimerRegSet =TIM8 ;break;
 80004f8:	4b32      	ldr	r3, [pc, #200]	; (80005c4 <Gpt_Init+0x1e8>)
 80004fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80004fc:	e012      	b.n	8000524 <Gpt_Init+0x148>
            case GPT_TIMER_CHANNEL_9 : UsedTimerRegSet =TIM9 ;break;
 80004fe:	4b32      	ldr	r3, [pc, #200]	; (80005c8 <Gpt_Init+0x1ec>)
 8000500:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000502:	e00f      	b.n	8000524 <Gpt_Init+0x148>
            case GPT_TIMER_CHANNEL_10: UsedTimerRegSet =TIM10;break;
 8000504:	4b31      	ldr	r3, [pc, #196]	; (80005cc <Gpt_Init+0x1f0>)
 8000506:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000508:	e00c      	b.n	8000524 <Gpt_Init+0x148>
            case GPT_TIMER_CHANNEL_11: UsedTimerRegSet =TIM11;break;
 800050a:	4b31      	ldr	r3, [pc, #196]	; (80005d0 <Gpt_Init+0x1f4>)
 800050c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800050e:	e009      	b.n	8000524 <Gpt_Init+0x148>
            case GPT_TIMER_CHANNEL_12: UsedTimerRegSet =TIM12;break;
 8000510:	4b30      	ldr	r3, [pc, #192]	; (80005d4 <Gpt_Init+0x1f8>)
 8000512:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000514:	e006      	b.n	8000524 <Gpt_Init+0x148>
            case GPT_TIMER_CHANNEL_13: UsedTimerRegSet =TIM13;break;
 8000516:	4b30      	ldr	r3, [pc, #192]	; (80005d8 <Gpt_Init+0x1fc>)
 8000518:	62fb      	str	r3, [r7, #44]	; 0x2c
 800051a:	e003      	b.n	8000524 <Gpt_Init+0x148>
            case GPT_TIMER_CHANNEL_14: UsedTimerRegSet =TIM14;break;
 800051c:	4b2f      	ldr	r3, [pc, #188]	; (80005dc <Gpt_Init+0x200>)
 800051e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000520:	e000      	b.n	8000524 <Gpt_Init+0x148>
            case GPT_TIMER_CHANNEL_15: /*********/;break;default:break;
 8000522:	bf00      	nop
        }
        if(ChannelId==GPT_SYSTICK_TIMER)
 8000524:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000528:	2b0f      	cmp	r3, #15
 800052a:	d10c      	bne.n	8000546 <Gpt_Init+0x16a>
        {
            SYSTICK ->STK_CTRL &=~(STCR_MASK<<STCR_CLKSOURCE_PIN_ACCESS);
 800052c:	4b2c      	ldr	r3, [pc, #176]	; (80005e0 <Gpt_Init+0x204>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a2b      	ldr	r2, [pc, #172]	; (80005e0 <Gpt_Init+0x204>)
 8000532:	f023 0304 	bic.w	r3, r3, #4
 8000536:	6013      	str	r3, [r2, #0]
            SYSTICK ->STK_CTRL &=~(STCR_MASK<<STCR_TICKINT_PIN_ACCESS  );
 8000538:	4b29      	ldr	r3, [pc, #164]	; (80005e0 <Gpt_Init+0x204>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4a28      	ldr	r2, [pc, #160]	; (80005e0 <Gpt_Init+0x204>)
 800053e:	f023 0302 	bic.w	r3, r3, #2
 8000542:	6013      	str	r3, [r2, #0]
 8000544:	e01e      	b.n	8000584 <Gpt_Init+0x1a8>
        }
        else
        {
        UsedTimerRegSet->CR1 &=~(CR1_ARPE_MASK<<CR1_ARPE_BIT_ACCESS); 
 8000546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800054e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000550:	601a      	str	r2, [r3, #0]
        UsedTimerRegSet->CR1 |= (1<<CR1_ARPE_BIT_ACCESS);
 8000552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800055a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800055c:	601a      	str	r2, [r3, #0]
        UsedTimerRegSet->CR1 &=~(CR1_OPM_MASK<<CR1_OPM_BIT_ACCESS); 
 800055e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	f023 0208 	bic.w	r2, r3, #8
 8000566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000568:	601a      	str	r2, [r3, #0]
        UsedTimerRegSet->CR1 |= (ChannelMode <<CR1_OPM_BIT_ACCESS);
 800056a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	7dfa      	ldrb	r2, [r7, #23]
 8000570:	00d2      	lsls	r2, r2, #3
 8000572:	431a      	orrs	r2, r3
 8000574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000576:	601a      	str	r2, [r3, #0]
        UsedTimerRegSet->PSC  = Prescale;
 8000578:	7bfa      	ldrb	r2, [r7, #15]
 800057a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800057c:	629a      	str	r2, [r3, #40]	; 0x28
        UsedTimerRegSet->ARR  = ChannelTickValueMax;
 800057e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000580:	69ba      	ldr	r2, [r7, #24]
 8000582:	62da      	str	r2, [r3, #44]	; 0x2c
    for(uint8_t i=0; i<ChannelsCount;i++)
 8000584:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000588:	3301      	adds	r3, #1
 800058a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800058e:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8000592:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000596:	429a      	cmp	r2, r3
 8000598:	f4ff af2f 	bcc.w	80003fa <Gpt_Init+0x1e>
        }
    }
}
 800059c:	bf00      	nop
 800059e:	bf00      	nop
 80005a0:	3734      	adds	r7, #52	; 0x34
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	40010000 	.word	0x40010000
 80005b0:	40000400 	.word	0x40000400
 80005b4:	40000800 	.word	0x40000800
 80005b8:	40000c00 	.word	0x40000c00
 80005bc:	40001000 	.word	0x40001000
 80005c0:	40001400 	.word	0x40001400
 80005c4:	40010400 	.word	0x40010400
 80005c8:	40014000 	.word	0x40014000
 80005cc:	40014400 	.word	0x40014400
 80005d0:	40014800 	.word	0x40014800
 80005d4:	40001800 	.word	0x40001800
 80005d8:	40001c00 	.word	0x40001c00
 80005dc:	40002000 	.word	0x40002000
 80005e0:	e000e010 	.word	0xe000e010

080005e4 <Gpt_GetTimeRemaining>:
*  Description         : Returns the time remaining until the target time is
*                        reached.
***********************************************************************************************************************
*/
Gpt_ValueType Gpt_GetTimeRemaining	(Gpt_ChannelType Channel)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	4603      	mov	r3, r0
 80005ec:	71fb      	strb	r3, [r7, #7]
    Gpt_ValueType ReturnValue=0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	60fb      	str	r3, [r7, #12]
    TIM_RegDef_t*   UsedTimerRegSet;
    switch(Channel)
 80005f2:	79fb      	ldrb	r3, [r7, #7]
 80005f4:	3b01      	subs	r3, #1
 80005f6:	2b0e      	cmp	r3, #14
 80005f8:	d84b      	bhi.n	8000692 <Gpt_GetTimeRemaining+0xae>
 80005fa:	a201      	add	r2, pc, #4	; (adr r2, 8000600 <Gpt_GetTimeRemaining+0x1c>)
 80005fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000600:	0800063d 	.word	0x0800063d
 8000604:	08000643 	.word	0x08000643
 8000608:	0800064b 	.word	0x0800064b
 800060c:	08000651 	.word	0x08000651
 8000610:	08000657 	.word	0x08000657
 8000614:	0800065d 	.word	0x0800065d
 8000618:	08000663 	.word	0x08000663
 800061c:	08000669 	.word	0x08000669
 8000620:	0800066f 	.word	0x0800066f
 8000624:	08000675 	.word	0x08000675
 8000628:	0800067b 	.word	0x0800067b
 800062c:	08000681 	.word	0x08000681
 8000630:	08000687 	.word	0x08000687
 8000634:	0800068d 	.word	0x0800068d
 8000638:	08000693 	.word	0x08000693
        {
            case GPT_TIMER_CHANNEL_1 : UsedTimerRegSet =TIM1 ;break;
 800063c:	4b1e      	ldr	r3, [pc, #120]	; (80006b8 <Gpt_GetTimeRemaining+0xd4>)
 800063e:	60bb      	str	r3, [r7, #8]
 8000640:	e028      	b.n	8000694 <Gpt_GetTimeRemaining+0xb0>
            case GPT_TIMER_CHANNEL_2 : UsedTimerRegSet =TIM2 ;break;
 8000642:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000646:	60bb      	str	r3, [r7, #8]
 8000648:	e024      	b.n	8000694 <Gpt_GetTimeRemaining+0xb0>
            case GPT_TIMER_CHANNEL_3 : UsedTimerRegSet =TIM3 ;break;
 800064a:	4b1c      	ldr	r3, [pc, #112]	; (80006bc <Gpt_GetTimeRemaining+0xd8>)
 800064c:	60bb      	str	r3, [r7, #8]
 800064e:	e021      	b.n	8000694 <Gpt_GetTimeRemaining+0xb0>
            case GPT_TIMER_CHANNEL_4 : UsedTimerRegSet =TIM4 ;break;
 8000650:	4b1b      	ldr	r3, [pc, #108]	; (80006c0 <Gpt_GetTimeRemaining+0xdc>)
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	e01e      	b.n	8000694 <Gpt_GetTimeRemaining+0xb0>
            case GPT_TIMER_CHANNEL_5 : UsedTimerRegSet =TIM5 ;break;
 8000656:	4b1b      	ldr	r3, [pc, #108]	; (80006c4 <Gpt_GetTimeRemaining+0xe0>)
 8000658:	60bb      	str	r3, [r7, #8]
 800065a:	e01b      	b.n	8000694 <Gpt_GetTimeRemaining+0xb0>
            case GPT_TIMER_CHANNEL_6 : UsedTimerRegSet =TIM6 ;break;
 800065c:	4b1a      	ldr	r3, [pc, #104]	; (80006c8 <Gpt_GetTimeRemaining+0xe4>)
 800065e:	60bb      	str	r3, [r7, #8]
 8000660:	e018      	b.n	8000694 <Gpt_GetTimeRemaining+0xb0>
            case GPT_TIMER_CHANNEL_7 : UsedTimerRegSet =TIM7 ;break;
 8000662:	4b1a      	ldr	r3, [pc, #104]	; (80006cc <Gpt_GetTimeRemaining+0xe8>)
 8000664:	60bb      	str	r3, [r7, #8]
 8000666:	e015      	b.n	8000694 <Gpt_GetTimeRemaining+0xb0>
            case GPT_TIMER_CHANNEL_8 : UsedTimerRegSet =TIM8 ;break;
 8000668:	4b19      	ldr	r3, [pc, #100]	; (80006d0 <Gpt_GetTimeRemaining+0xec>)
 800066a:	60bb      	str	r3, [r7, #8]
 800066c:	e012      	b.n	8000694 <Gpt_GetTimeRemaining+0xb0>
            case GPT_TIMER_CHANNEL_9 : UsedTimerRegSet =TIM9 ;break;
 800066e:	4b19      	ldr	r3, [pc, #100]	; (80006d4 <Gpt_GetTimeRemaining+0xf0>)
 8000670:	60bb      	str	r3, [r7, #8]
 8000672:	e00f      	b.n	8000694 <Gpt_GetTimeRemaining+0xb0>
            case GPT_TIMER_CHANNEL_10: UsedTimerRegSet =TIM10;break;
 8000674:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <Gpt_GetTimeRemaining+0xf4>)
 8000676:	60bb      	str	r3, [r7, #8]
 8000678:	e00c      	b.n	8000694 <Gpt_GetTimeRemaining+0xb0>
            case GPT_TIMER_CHANNEL_11: UsedTimerRegSet =TIM11;break;
 800067a:	4b18      	ldr	r3, [pc, #96]	; (80006dc <Gpt_GetTimeRemaining+0xf8>)
 800067c:	60bb      	str	r3, [r7, #8]
 800067e:	e009      	b.n	8000694 <Gpt_GetTimeRemaining+0xb0>
            case GPT_TIMER_CHANNEL_12: UsedTimerRegSet =TIM12;break;
 8000680:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <Gpt_GetTimeRemaining+0xfc>)
 8000682:	60bb      	str	r3, [r7, #8]
 8000684:	e006      	b.n	8000694 <Gpt_GetTimeRemaining+0xb0>
            case GPT_TIMER_CHANNEL_13: UsedTimerRegSet =TIM13;break;
 8000686:	4b17      	ldr	r3, [pc, #92]	; (80006e4 <Gpt_GetTimeRemaining+0x100>)
 8000688:	60bb      	str	r3, [r7, #8]
 800068a:	e003      	b.n	8000694 <Gpt_GetTimeRemaining+0xb0>
            case GPT_TIMER_CHANNEL_14: UsedTimerRegSet =TIM14;break;
 800068c:	4b16      	ldr	r3, [pc, #88]	; (80006e8 <Gpt_GetTimeRemaining+0x104>)
 800068e:	60bb      	str	r3, [r7, #8]
 8000690:	e000      	b.n	8000694 <Gpt_GetTimeRemaining+0xb0>
            case GPT_TIMER_CHANNEL_15: /*********/;break;
            default:break;
 8000692:	bf00      	nop
        }
        if(Channel==GPT_SYSTICK_TIMER)
 8000694:	79fb      	ldrb	r3, [r7, #7]
 8000696:	2b0f      	cmp	r3, #15
 8000698:	d103      	bne.n	80006a2 <Gpt_GetTimeRemaining+0xbe>
        {
           ReturnValue=(SYSTICK->STK_VAL);
 800069a:	4b14      	ldr	r3, [pc, #80]	; (80006ec <Gpt_GetTimeRemaining+0x108>)
 800069c:	689b      	ldr	r3, [r3, #8]
 800069e:	60fb      	str	r3, [r7, #12]
 80006a0:	e002      	b.n	80006a8 <Gpt_GetTimeRemaining+0xc4>
        }
        else
        {
        	ReturnValue= UsedTimerRegSet->CNT;
 80006a2:	68bb      	ldr	r3, [r7, #8]
 80006a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006a6:	60fb      	str	r3, [r7, #12]
        }

        return ReturnValue;
 80006a8:	68fb      	ldr	r3, [r7, #12]
}		
 80006aa:	4618      	mov	r0, r3
 80006ac:	3714      	adds	r7, #20
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	40010000 	.word	0x40010000
 80006bc:	40000400 	.word	0x40000400
 80006c0:	40000800 	.word	0x40000800
 80006c4:	40000c00 	.word	0x40000c00
 80006c8:	40001000 	.word	0x40001000
 80006cc:	40001400 	.word	0x40001400
 80006d0:	40010400 	.word	0x40010400
 80006d4:	40014000 	.word	0x40014000
 80006d8:	40014400 	.word	0x40014400
 80006dc:	40014800 	.word	0x40014800
 80006e0:	40001800 	.word	0x40001800
 80006e4:	40001c00 	.word	0x40001c00
 80006e8:	40002000 	.word	0x40002000
 80006ec:	e000e010 	.word	0xe000e010

080006f0 <Gpt_StartTimer>:
*  @retval             : None
*  Description         : Starts a timer channel.
***********************************************************************************************************************
*/
void Gpt_StartTimer(Gpt_ChannelType Channel,Gpt_ValueType Value )
{
 80006f0:	b480      	push	{r7}
 80006f2:	b085      	sub	sp, #20
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4603      	mov	r3, r0
 80006f8:	6039      	str	r1, [r7, #0]
 80006fa:	71fb      	strb	r3, [r7, #7]
    TIM_RegDef_t*   UsedTimerRegSet;
    switch(Channel)
 80006fc:	79fb      	ldrb	r3, [r7, #7]
 80006fe:	3b01      	subs	r3, #1
 8000700:	2b0e      	cmp	r3, #14
 8000702:	d84c      	bhi.n	800079e <Gpt_StartTimer+0xae>
 8000704:	a201      	add	r2, pc, #4	; (adr r2, 800070c <Gpt_StartTimer+0x1c>)
 8000706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800070a:	bf00      	nop
 800070c:	08000749 	.word	0x08000749
 8000710:	0800074f 	.word	0x0800074f
 8000714:	08000757 	.word	0x08000757
 8000718:	0800075d 	.word	0x0800075d
 800071c:	08000763 	.word	0x08000763
 8000720:	08000769 	.word	0x08000769
 8000724:	0800076f 	.word	0x0800076f
 8000728:	08000775 	.word	0x08000775
 800072c:	0800077b 	.word	0x0800077b
 8000730:	08000781 	.word	0x08000781
 8000734:	08000787 	.word	0x08000787
 8000738:	0800078d 	.word	0x0800078d
 800073c:	08000793 	.word	0x08000793
 8000740:	08000799 	.word	0x08000799
 8000744:	0800079f 	.word	0x0800079f
        {
            case GPT_TIMER_CHANNEL_1 : UsedTimerRegSet =TIM1 ;break;
 8000748:	4b25      	ldr	r3, [pc, #148]	; (80007e0 <Gpt_StartTimer+0xf0>)
 800074a:	60fb      	str	r3, [r7, #12]
 800074c:	e028      	b.n	80007a0 <Gpt_StartTimer+0xb0>
            case GPT_TIMER_CHANNEL_2 : UsedTimerRegSet =TIM2 ;break;
 800074e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000752:	60fb      	str	r3, [r7, #12]
 8000754:	e024      	b.n	80007a0 <Gpt_StartTimer+0xb0>
            case GPT_TIMER_CHANNEL_3 : UsedTimerRegSet =TIM3 ;break;
 8000756:	4b23      	ldr	r3, [pc, #140]	; (80007e4 <Gpt_StartTimer+0xf4>)
 8000758:	60fb      	str	r3, [r7, #12]
 800075a:	e021      	b.n	80007a0 <Gpt_StartTimer+0xb0>
            case GPT_TIMER_CHANNEL_4 : UsedTimerRegSet =TIM4 ;break;
 800075c:	4b22      	ldr	r3, [pc, #136]	; (80007e8 <Gpt_StartTimer+0xf8>)
 800075e:	60fb      	str	r3, [r7, #12]
 8000760:	e01e      	b.n	80007a0 <Gpt_StartTimer+0xb0>
            case GPT_TIMER_CHANNEL_5 : UsedTimerRegSet =TIM5 ;break;
 8000762:	4b22      	ldr	r3, [pc, #136]	; (80007ec <Gpt_StartTimer+0xfc>)
 8000764:	60fb      	str	r3, [r7, #12]
 8000766:	e01b      	b.n	80007a0 <Gpt_StartTimer+0xb0>
            case GPT_TIMER_CHANNEL_6 : UsedTimerRegSet =TIM6 ;break;
 8000768:	4b21      	ldr	r3, [pc, #132]	; (80007f0 <Gpt_StartTimer+0x100>)
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	e018      	b.n	80007a0 <Gpt_StartTimer+0xb0>
            case GPT_TIMER_CHANNEL_7 : UsedTimerRegSet =TIM7 ;break;
 800076e:	4b21      	ldr	r3, [pc, #132]	; (80007f4 <Gpt_StartTimer+0x104>)
 8000770:	60fb      	str	r3, [r7, #12]
 8000772:	e015      	b.n	80007a0 <Gpt_StartTimer+0xb0>
            case GPT_TIMER_CHANNEL_8 : UsedTimerRegSet =TIM8 ;break;
 8000774:	4b20      	ldr	r3, [pc, #128]	; (80007f8 <Gpt_StartTimer+0x108>)
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	e012      	b.n	80007a0 <Gpt_StartTimer+0xb0>
            case GPT_TIMER_CHANNEL_9 : UsedTimerRegSet =TIM9 ;break;
 800077a:	4b20      	ldr	r3, [pc, #128]	; (80007fc <Gpt_StartTimer+0x10c>)
 800077c:	60fb      	str	r3, [r7, #12]
 800077e:	e00f      	b.n	80007a0 <Gpt_StartTimer+0xb0>
            case GPT_TIMER_CHANNEL_10: UsedTimerRegSet =TIM10;break;
 8000780:	4b1f      	ldr	r3, [pc, #124]	; (8000800 <Gpt_StartTimer+0x110>)
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	e00c      	b.n	80007a0 <Gpt_StartTimer+0xb0>
            case GPT_TIMER_CHANNEL_11: UsedTimerRegSet =TIM11;break;
 8000786:	4b1f      	ldr	r3, [pc, #124]	; (8000804 <Gpt_StartTimer+0x114>)
 8000788:	60fb      	str	r3, [r7, #12]
 800078a:	e009      	b.n	80007a0 <Gpt_StartTimer+0xb0>
            case GPT_TIMER_CHANNEL_12: UsedTimerRegSet =TIM12;break;
 800078c:	4b1e      	ldr	r3, [pc, #120]	; (8000808 <Gpt_StartTimer+0x118>)
 800078e:	60fb      	str	r3, [r7, #12]
 8000790:	e006      	b.n	80007a0 <Gpt_StartTimer+0xb0>
            case GPT_TIMER_CHANNEL_13: UsedTimerRegSet =TIM13;break;
 8000792:	4b1e      	ldr	r3, [pc, #120]	; (800080c <Gpt_StartTimer+0x11c>)
 8000794:	60fb      	str	r3, [r7, #12]
 8000796:	e003      	b.n	80007a0 <Gpt_StartTimer+0xb0>
            case GPT_TIMER_CHANNEL_14: UsedTimerRegSet =TIM14;break;
 8000798:	4b1d      	ldr	r3, [pc, #116]	; (8000810 <Gpt_StartTimer+0x120>)
 800079a:	60fb      	str	r3, [r7, #12]
 800079c:	e000      	b.n	80007a0 <Gpt_StartTimer+0xb0>
            case GPT_TIMER_CHANNEL_15: /*********/;break;
            default:break;
 800079e:	bf00      	nop
        }
        if(Channel==GPT_SYSTICK_TIMER)
 80007a0:	79fb      	ldrb	r3, [r7, #7]
 80007a2:	2b0f      	cmp	r3, #15
 80007a4:	d10c      	bne.n	80007c0 <Gpt_StartTimer+0xd0>
        {
            /*Put Value in STK Load register*/
            SYSTICK->STK_LOAD = Value;
 80007a6:	4a1b      	ldr	r2, [pc, #108]	; (8000814 <Gpt_StartTimer+0x124>)
 80007a8:	683b      	ldr	r3, [r7, #0]
 80007aa:	6053      	str	r3, [r2, #4]
            /*STK counter = 0*/
            SYSTICK->STK_VAL=0;
 80007ac:	4b19      	ldr	r3, [pc, #100]	; (8000814 <Gpt_StartTimer+0x124>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	609a      	str	r2, [r3, #8]
            /*Enable counter*/
            SYSTICK->STK_CTRL |= (STCR_MASK<<STCR_COUNTER_PIN_ACCESS);// To start counting down
 80007b2:	4b18      	ldr	r3, [pc, #96]	; (8000814 <Gpt_StartTimer+0x124>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4a17      	ldr	r2, [pc, #92]	; (8000814 <Gpt_StartTimer+0x124>)
 80007b8:	f043 0301 	orr.w	r3, r3, #1
 80007bc:	6013      	str	r3, [r2, #0]
        {
        UsedTimerRegSet->ARR = Value;
        UsedTimerRegSet->CR1|=(1<<0);
        }

}	
 80007be:	e008      	b.n	80007d2 <Gpt_StartTimer+0xe2>
        UsedTimerRegSet->ARR = Value;
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	683a      	ldr	r2, [r7, #0]
 80007c4:	62da      	str	r2, [r3, #44]	; 0x2c
        UsedTimerRegSet->CR1|=(1<<0);
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	f043 0201 	orr.w	r2, r3, #1
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	601a      	str	r2, [r3, #0]
}	
 80007d2:	bf00      	nop
 80007d4:	3714      	adds	r7, #20
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	40010000 	.word	0x40010000
 80007e4:	40000400 	.word	0x40000400
 80007e8:	40000800 	.word	0x40000800
 80007ec:	40000c00 	.word	0x40000c00
 80007f0:	40001000 	.word	0x40001000
 80007f4:	40001400 	.word	0x40001400
 80007f8:	40010400 	.word	0x40010400
 80007fc:	40014000 	.word	0x40014000
 8000800:	40014400 	.word	0x40014400
 8000804:	40014800 	.word	0x40014800
 8000808:	40001800 	.word	0x40001800
 800080c:	40001c00 	.word	0x40001c00
 8000810:	40002000 	.word	0x40002000
 8000814:	e000e010 	.word	0xe000e010

08000818 <Gpt_EnableNotification>:
*  Description         : Enables the interrupt notification for a channel
*                        relevant in normal mode).
***********************************************************************************************************************
*/
void Gpt_EnableNotification	(Gpt_ChannelType Channel)
{
 8000818:	b480      	push	{r7}
 800081a:	b085      	sub	sp, #20
 800081c:	af00      	add	r7, sp, #0
 800081e:	4603      	mov	r3, r0
 8000820:	71fb      	strb	r3, [r7, #7]
    TIM_RegDef_t*   UsedTimerRegSet;
    switch(Channel)
 8000822:	79fb      	ldrb	r3, [r7, #7]
 8000824:	3b01      	subs	r3, #1
 8000826:	2b0e      	cmp	r3, #14
 8000828:	d84b      	bhi.n	80008c2 <Gpt_EnableNotification+0xaa>
 800082a:	a201      	add	r2, pc, #4	; (adr r2, 8000830 <Gpt_EnableNotification+0x18>)
 800082c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000830:	0800086d 	.word	0x0800086d
 8000834:	08000873 	.word	0x08000873
 8000838:	0800087b 	.word	0x0800087b
 800083c:	08000881 	.word	0x08000881
 8000840:	08000887 	.word	0x08000887
 8000844:	0800088d 	.word	0x0800088d
 8000848:	08000893 	.word	0x08000893
 800084c:	08000899 	.word	0x08000899
 8000850:	0800089f 	.word	0x0800089f
 8000854:	080008a5 	.word	0x080008a5
 8000858:	080008ab 	.word	0x080008ab
 800085c:	080008b1 	.word	0x080008b1
 8000860:	080008b7 	.word	0x080008b7
 8000864:	080008bd 	.word	0x080008bd
 8000868:	080008c3 	.word	0x080008c3
        {
            case GPT_TIMER_CHANNEL_1 : UsedTimerRegSet =TIM1 ;break;
 800086c:	4b23      	ldr	r3, [pc, #140]	; (80008fc <Gpt_EnableNotification+0xe4>)
 800086e:	60fb      	str	r3, [r7, #12]
 8000870:	e028      	b.n	80008c4 <Gpt_EnableNotification+0xac>
            case GPT_TIMER_CHANNEL_2 : UsedTimerRegSet =TIM2 ;break;
 8000872:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	e024      	b.n	80008c4 <Gpt_EnableNotification+0xac>
            case GPT_TIMER_CHANNEL_3 : UsedTimerRegSet =TIM3 ;break;
 800087a:	4b21      	ldr	r3, [pc, #132]	; (8000900 <Gpt_EnableNotification+0xe8>)
 800087c:	60fb      	str	r3, [r7, #12]
 800087e:	e021      	b.n	80008c4 <Gpt_EnableNotification+0xac>
            case GPT_TIMER_CHANNEL_4 : UsedTimerRegSet =TIM4 ;break;
 8000880:	4b20      	ldr	r3, [pc, #128]	; (8000904 <Gpt_EnableNotification+0xec>)
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	e01e      	b.n	80008c4 <Gpt_EnableNotification+0xac>
            case GPT_TIMER_CHANNEL_5 : UsedTimerRegSet =TIM5 ;break;
 8000886:	4b20      	ldr	r3, [pc, #128]	; (8000908 <Gpt_EnableNotification+0xf0>)
 8000888:	60fb      	str	r3, [r7, #12]
 800088a:	e01b      	b.n	80008c4 <Gpt_EnableNotification+0xac>
            case GPT_TIMER_CHANNEL_6 : UsedTimerRegSet =TIM6 ;break;
 800088c:	4b1f      	ldr	r3, [pc, #124]	; (800090c <Gpt_EnableNotification+0xf4>)
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	e018      	b.n	80008c4 <Gpt_EnableNotification+0xac>
            case GPT_TIMER_CHANNEL_7 : UsedTimerRegSet =TIM7 ;break;
 8000892:	4b1f      	ldr	r3, [pc, #124]	; (8000910 <Gpt_EnableNotification+0xf8>)
 8000894:	60fb      	str	r3, [r7, #12]
 8000896:	e015      	b.n	80008c4 <Gpt_EnableNotification+0xac>
            case GPT_TIMER_CHANNEL_8 : UsedTimerRegSet =TIM8 ;break;
 8000898:	4b1e      	ldr	r3, [pc, #120]	; (8000914 <Gpt_EnableNotification+0xfc>)
 800089a:	60fb      	str	r3, [r7, #12]
 800089c:	e012      	b.n	80008c4 <Gpt_EnableNotification+0xac>
            case GPT_TIMER_CHANNEL_9 : UsedTimerRegSet =TIM9 ;break;
 800089e:	4b1e      	ldr	r3, [pc, #120]	; (8000918 <Gpt_EnableNotification+0x100>)
 80008a0:	60fb      	str	r3, [r7, #12]
 80008a2:	e00f      	b.n	80008c4 <Gpt_EnableNotification+0xac>
            case GPT_TIMER_CHANNEL_10: UsedTimerRegSet =TIM10;break;
 80008a4:	4b1d      	ldr	r3, [pc, #116]	; (800091c <Gpt_EnableNotification+0x104>)
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	e00c      	b.n	80008c4 <Gpt_EnableNotification+0xac>
            case GPT_TIMER_CHANNEL_11: UsedTimerRegSet =TIM11;break;
 80008aa:	4b1d      	ldr	r3, [pc, #116]	; (8000920 <Gpt_EnableNotification+0x108>)
 80008ac:	60fb      	str	r3, [r7, #12]
 80008ae:	e009      	b.n	80008c4 <Gpt_EnableNotification+0xac>
            case GPT_TIMER_CHANNEL_12: UsedTimerRegSet =TIM12;break;
 80008b0:	4b1c      	ldr	r3, [pc, #112]	; (8000924 <Gpt_EnableNotification+0x10c>)
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	e006      	b.n	80008c4 <Gpt_EnableNotification+0xac>
            case GPT_TIMER_CHANNEL_13: UsedTimerRegSet =TIM13;break;
 80008b6:	4b1c      	ldr	r3, [pc, #112]	; (8000928 <Gpt_EnableNotification+0x110>)
 80008b8:	60fb      	str	r3, [r7, #12]
 80008ba:	e003      	b.n	80008c4 <Gpt_EnableNotification+0xac>
            case GPT_TIMER_CHANNEL_14: UsedTimerRegSet =TIM14;break;
 80008bc:	4b1b      	ldr	r3, [pc, #108]	; (800092c <Gpt_EnableNotification+0x114>)
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	e000      	b.n	80008c4 <Gpt_EnableNotification+0xac>
            case GPT_TIMER_CHANNEL_15: /*********/;break;
            default:break;
 80008c2:	bf00      	nop
        }
        if(Channel==GPT_SYSTICK_TIMER)
 80008c4:	79fb      	ldrb	r3, [r7, #7]
 80008c6:	2b0f      	cmp	r3, #15
 80008c8:	d106      	bne.n	80008d8 <Gpt_EnableNotification+0xc0>
        {
            SYSTICK ->STK_CTRL |= (STCR_MASK<<STCR_TICKINT_PIN_ACCESS);
 80008ca:	4b19      	ldr	r3, [pc, #100]	; (8000930 <Gpt_EnableNotification+0x118>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4a18      	ldr	r2, [pc, #96]	; (8000930 <Gpt_EnableNotification+0x118>)
 80008d0:	f043 0302 	orr.w	r3, r3, #2
 80008d4:	6013      	str	r3, [r2, #0]
//        	UsedTimerRegSet->EGR &=~(EGR_TG_MASK<<EGR_TG_BIT_ACCESS);
//        	UsedTimerRegSet->EGR |= (EGR_TG_MASK<<EGR_TG_BIT_ACCESS);
        	UsedTimerRegSet->DIER&=~(DIER_TIE_MASK<<DIER_TIE_BIT_ACCESS);
        	UsedTimerRegSet->DIER |= (DIER_TIE_MASK<<DIER_TIE_BIT_ACCESS);
        }
}	
 80008d6:	e00b      	b.n	80008f0 <Gpt_EnableNotification+0xd8>
        	UsedTimerRegSet->DIER&=~(DIER_TIE_MASK<<DIER_TIE_BIT_ACCESS);
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	68db      	ldr	r3, [r3, #12]
 80008dc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	60da      	str	r2, [r3, #12]
        	UsedTimerRegSet->DIER |= (DIER_TIE_MASK<<DIER_TIE_BIT_ACCESS);
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	68db      	ldr	r3, [r3, #12]
 80008e8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	60da      	str	r2, [r3, #12]
}	
 80008f0:	bf00      	nop
 80008f2:	3714      	adds	r7, #20
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr
 80008fc:	40010000 	.word	0x40010000
 8000900:	40000400 	.word	0x40000400
 8000904:	40000800 	.word	0x40000800
 8000908:	40000c00 	.word	0x40000c00
 800090c:	40001000 	.word	0x40001000
 8000910:	40001400 	.word	0x40001400
 8000914:	40010400 	.word	0x40010400
 8000918:	40014000 	.word	0x40014000
 800091c:	40014400 	.word	0x40014400
 8000920:	40014800 	.word	0x40014800
 8000924:	40001800 	.word	0x40001800
 8000928:	40001c00 	.word	0x40001c00
 800092c:	40002000 	.word	0x40002000
 8000930:	e000e010 	.word	0xe000e010

08000934 <NVIC_Init>:
* \Parameters (in) : None                     
* \Parameters (out): None                                                      
* \Return value:   : None
*******************************************************************************/
void NVIC_Init(void)
{
 8000934:	b490      	push	{r4, r7}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
	uint8_t Groupriority;
	NVIC_InterruptState_t InterruptState;
	

/*TODO Configure Grouping\SubGrouping System in Application Interrupt and Reset Control Register (AIRCR) in SCB*/
    SCB_AIRCR =  (Group);
 800093a:	4a9e      	ldr	r2, [pc, #632]	; (8000bb4 <NVIC_Init+0x280>)
 800093c:	4b9e      	ldr	r3, [pc, #632]	; (8000bb8 <NVIC_Init+0x284>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	6013      	str	r3, [r2, #0]

/*TODO : Assign Group\Subgroup priority in NVIC_PRIx Nvic and SCB_SHPRx Registers*/  
	for(NVIC_Cfg_Counter=0;NVIC_Cfg_Counter<NVIC_ACTIVATED_INT_SIZE;NVIC_Cfg_Counter++)
 8000942:	2300      	movs	r3, #0
 8000944:	71fb      	strb	r3, [r7, #7]
 8000946:	e0df      	b.n	8000b08 <NVIC_Init+0x1d4>
	{	
		InterruptNumber =NVIC_Cfg[NVIC_Cfg_Counter].interruptNumber;
 8000948:	79fb      	ldrb	r3, [r7, #7]
 800094a:	4a9c      	ldr	r2, [pc, #624]	; (8000bbc <NVIC_Init+0x288>)
 800094c:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8000950:	717b      	strb	r3, [r7, #5]
		SubgroupPriority=NVIC_Cfg[NVIC_Cfg_Counter].subgroupPriority;
 8000952:	79fb      	ldrb	r3, [r7, #7]
 8000954:	4a99      	ldr	r2, [pc, #612]	; (8000bbc <NVIC_Init+0x288>)
 8000956:	009b      	lsls	r3, r3, #2
 8000958:	4413      	add	r3, r2
 800095a:	789b      	ldrb	r3, [r3, #2]
 800095c:	713b      	strb	r3, [r7, #4]
		Groupriority	=NVIC_Cfg[NVIC_Cfg_Counter].groupPriority;
 800095e:	79fb      	ldrb	r3, [r7, #7]
 8000960:	4a96      	ldr	r2, [pc, #600]	; (8000bbc <NVIC_Init+0x288>)
 8000962:	009b      	lsls	r3, r3, #2
 8000964:	4413      	add	r3, r2
 8000966:	785b      	ldrb	r3, [r3, #1]
 8000968:	70fb      	strb	r3, [r7, #3]
		InterruptState  =NVIC_Cfg[NVIC_Cfg_Counter].interruptState; 
 800096a:	79fb      	ldrb	r3, [r7, #7]
 800096c:	4a93      	ldr	r2, [pc, #588]	; (8000bbc <NVIC_Init+0x288>)
 800096e:	009b      	lsls	r3, r3, #2
 8000970:	4413      	add	r3, r2
 8000972:	78db      	ldrb	r3, [r3, #3]
 8000974:	71bb      	strb	r3, [r7, #6]
		//page 229 in f446 programming manual
		uint8_t Priority =  (SubgroupPriority) | (Groupriority) << ( (Group - BASE_GROUP) / GROUP_UNIT_DIFFERECE )  ;// 0x100 Hex  ---> 256 Decimal
 8000976:	78fa      	ldrb	r2, [r7, #3]
 8000978:	4b8f      	ldr	r3, [pc, #572]	; (8000bb8 <NVIC_Init+0x284>)
 800097a:	6819      	ldr	r1, [r3, #0]
 800097c:	4b90      	ldr	r3, [pc, #576]	; (8000bc0 <NVIC_Init+0x28c>)
 800097e:	440b      	add	r3, r1
 8000980:	0a1b      	lsrs	r3, r3, #8
 8000982:	fa02 f303 	lsl.w	r3, r2, r3
 8000986:	b25a      	sxtb	r2, r3
 8000988:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800098c:	4313      	orrs	r3, r2
 800098e:	b25b      	sxtb	r3, r3
 8000990:	70bb      	strb	r3, [r7, #2]
		
		if( InterruptNumber < NVIC_ZERO )
 8000992:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000996:	2b00      	cmp	r3, #0
 8000998:	da5d      	bge.n	8000a56 <NVIC_Init+0x122>
		{
			//Core Peripheral
			switch(InterruptNumber)
 800099a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800099e:	330c      	adds	r3, #12
 80009a0:	2b0b      	cmp	r3, #11
 80009a2:	f200 80ad 	bhi.w	8000b00 <NVIC_Init+0x1cc>
 80009a6:	a201      	add	r2, pc, #4	; (adr r2, 80009ac <NVIC_Init+0x78>)
 80009a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009ac:	080009dd 	.word	0x080009dd
 80009b0:	080009f9 	.word	0x080009f9
 80009b4:	08000a15 	.word	0x08000a15
 80009b8:	08000b01 	.word	0x08000b01
 80009bc:	08000b01 	.word	0x08000b01
 80009c0:	08000b01 	.word	0x08000b01
 80009c4:	08000b01 	.word	0x08000b01
 80009c8:	08000a31 	.word	0x08000a31
 80009cc:	08000b01 	.word	0x08000b01
 80009d0:	08000b01 	.word	0x08000b01
 80009d4:	08000a3b 	.word	0x08000a3b
 80009d8:	08000a45 	.word	0x08000a45
			{
				case MemoryManagement_IRQn :
					SCB->SCB_SHPR1 = ( Priority ) << (MEMMANAGE_BITSHIFT );
 80009dc:	78bb      	ldrb	r3, [r7, #2]
 80009de:	011a      	lsls	r2, r3, #4
 80009e0:	4b78      	ldr	r3, [pc, #480]	; (8000bc4 <NVIC_Init+0x290>)
 80009e2:	619a      	str	r2, [r3, #24]
					SCB_SHCSR->BIT.MEMFAULTENA=InterruptState;
 80009e4:	4a78      	ldr	r2, [pc, #480]	; (8000bc8 <NVIC_Init+0x294>)
 80009e6:	79bb      	ldrb	r3, [r7, #6]
 80009e8:	f003 0301 	and.w	r3, r3, #1
 80009ec:	b2d9      	uxtb	r1, r3
 80009ee:	6813      	ldr	r3, [r2, #0]
 80009f0:	f361 4310 	bfi	r3, r1, #16, #1
 80009f4:	6013      	str	r3, [r2, #0]
					break;
 80009f6:	e084      	b.n	8000b02 <NVIC_Init+0x1ce>
				case BusFault_IRQn  :
					SCB->SCB_SHPR1 = ( Priority ) << (BUSFAULT_BITSHIFT  );
 80009f8:	78bb      	ldrb	r3, [r7, #2]
 80009fa:	031a      	lsls	r2, r3, #12
 80009fc:	4b71      	ldr	r3, [pc, #452]	; (8000bc4 <NVIC_Init+0x290>)
 80009fe:	619a      	str	r2, [r3, #24]
					SCB_SHCSR->BIT.BUSFAULTENA=InterruptState;
 8000a00:	4a71      	ldr	r2, [pc, #452]	; (8000bc8 <NVIC_Init+0x294>)
 8000a02:	79bb      	ldrb	r3, [r7, #6]
 8000a04:	f003 0301 	and.w	r3, r3, #1
 8000a08:	b2d9      	uxtb	r1, r3
 8000a0a:	6813      	ldr	r3, [r2, #0]
 8000a0c:	f361 4351 	bfi	r3, r1, #17, #1
 8000a10:	6013      	str	r3, [r2, #0]
					break;
 8000a12:	e076      	b.n	8000b02 <NVIC_Init+0x1ce>
				case UsageFault_IRQn:
					SCB->SCB_SHPR1 = ( Priority ) << (USAGEFAULT_BITSHIFT);
 8000a14:	78bb      	ldrb	r3, [r7, #2]
 8000a16:	051a      	lsls	r2, r3, #20
 8000a18:	4b6a      	ldr	r3, [pc, #424]	; (8000bc4 <NVIC_Init+0x290>)
 8000a1a:	619a      	str	r2, [r3, #24]
					SCB_SHCSR->BIT.USGFAULTENA=InterruptState;
 8000a1c:	4a6a      	ldr	r2, [pc, #424]	; (8000bc8 <NVIC_Init+0x294>)
 8000a1e:	79bb      	ldrb	r3, [r7, #6]
 8000a20:	f003 0301 	and.w	r3, r3, #1
 8000a24:	b2d9      	uxtb	r1, r3
 8000a26:	6813      	ldr	r3, [r2, #0]
 8000a28:	f361 4392 	bfi	r3, r1, #18, #1
 8000a2c:	6013      	str	r3, [r2, #0]
					break;
 8000a2e:	e068      	b.n	8000b02 <NVIC_Init+0x1ce>
				case SVCall_IRQn :SCB->SCB_SHPR2 = ( Priority ) << (SVC_BITSHIFT   );break;
 8000a30:	78bb      	ldrb	r3, [r7, #2]
 8000a32:	071a      	lsls	r2, r3, #28
 8000a34:	4b63      	ldr	r3, [pc, #396]	; (8000bc4 <NVIC_Init+0x290>)
 8000a36:	61da      	str	r2, [r3, #28]
 8000a38:	e063      	b.n	8000b02 <NVIC_Init+0x1ce>
				case PendSV_IRQn :SCB->SCB_SHPR3 = ( Priority ) << (PENDSV_BITSHIFT);break;
 8000a3a:	78bb      	ldrb	r3, [r7, #2]
 8000a3c:	051a      	lsls	r2, r3, #20
 8000a3e:	4b61      	ldr	r3, [pc, #388]	; (8000bc4 <NVIC_Init+0x290>)
 8000a40:	621a      	str	r2, [r3, #32]
 8000a42:	e05e      	b.n	8000b02 <NVIC_Init+0x1ce>
				case SysTick_IRQn:
					SCB->SCB_SHPR3 = ( Priority ) << (SYSTICK_BITSHIFT);
 8000a44:	78bb      	ldrb	r3, [r7, #2]
 8000a46:	071a      	lsls	r2, r3, #28
 8000a48:	4b5e      	ldr	r3, [pc, #376]	; (8000bc4 <NVIC_Init+0x290>)
 8000a4a:	621a      	str	r2, [r3, #32]
					SYSTICK->STK_CTRL = InterruptState << SYSTICK_INT_EN_BITSHIFT;
 8000a4c:	79bb      	ldrb	r3, [r7, #6]
 8000a4e:	005a      	lsls	r2, r3, #1
 8000a50:	4b5e      	ldr	r3, [pc, #376]	; (8000bcc <NVIC_Init+0x298>)
 8000a52:	601a      	str	r2, [r3, #0]
					break;
 8000a54:	e055      	b.n	8000b02 <NVIC_Init+0x1ce>
				default:break;
			}
		}
		else if( InterruptNumber >= 0 )
 8000a56:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	db51      	blt.n	8000b02 <NVIC_Init+0x1ce>
		{
			NVIC->NVIC_IPR [ InterruptNumber    ] &= ~0xF << (4) ;
 8000a5e:	4a5c      	ldr	r2, [pc, #368]	; (8000bd0 <NVIC_Init+0x29c>)
 8000a60:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000a64:	4413      	add	r3, r2
 8000a66:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 8000a6a:	4a59      	ldr	r2, [pc, #356]	; (8000bd0 <NVIC_Init+0x29c>)
 8000a6c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000a70:	4413      	add	r3, r2
 8000a72:	2200      	movs	r2, #0
 8000a74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
			NVIC->NVIC_IPR [ InterruptNumber    ]  =  (uint8_t)(Priority << (4) & (uint32_t)0xFFUL);
 8000a78:	4955      	ldr	r1, [pc, #340]	; (8000bd0 <NVIC_Init+0x29c>)
 8000a7a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000a7e:	78ba      	ldrb	r2, [r7, #2]
 8000a80:	0112      	lsls	r2, r2, #4
 8000a82:	b2d2      	uxtb	r2, r2
 8000a84:	440b      	add	r3, r1
 8000a86:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
			NVIC->NVIC_ISER[ InterruptNumber/32 ] &= ~(NVIC_ONE << (InterruptNumber%32));
 8000a8a:	4a51      	ldr	r2, [pc, #324]	; (8000bd0 <NVIC_Init+0x29c>)
 8000a8c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	da00      	bge.n	8000a96 <NVIC_Init+0x162>
 8000a94:	331f      	adds	r3, #31
 8000a96:	115b      	asrs	r3, r3, #5
 8000a98:	b258      	sxtb	r0, r3
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000aa0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000aa4:	4259      	negs	r1, r3
 8000aa6:	f003 031f 	and.w	r3, r3, #31
 8000aaa:	f001 011f 	and.w	r1, r1, #31
 8000aae:	bf58      	it	pl
 8000ab0:	424b      	negpl	r3, r1
 8000ab2:	b25b      	sxtb	r3, r3
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	408b      	lsls	r3, r1
 8000aba:	43db      	mvns	r3, r3
 8000abc:	4944      	ldr	r1, [pc, #272]	; (8000bd0 <NVIC_Init+0x29c>)
 8000abe:	4013      	ands	r3, r2
 8000ac0:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
			NVIC->NVIC_ISER[ InterruptNumber/32 ] |= InterruptState << (InterruptNumber%32) ;
 8000ac4:	4a42      	ldr	r2, [pc, #264]	; (8000bd0 <NVIC_Init+0x29c>)
 8000ac6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	da00      	bge.n	8000ad0 <NVIC_Init+0x19c>
 8000ace:	331f      	adds	r3, #31
 8000ad0:	115b      	asrs	r3, r3, #5
 8000ad2:	b25c      	sxtb	r4, r3
 8000ad4:	4623      	mov	r3, r4
 8000ad6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ada:	79b9      	ldrb	r1, [r7, #6]
 8000adc:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000ae0:	4258      	negs	r0, r3
 8000ae2:	f003 031f 	and.w	r3, r3, #31
 8000ae6:	f000 001f 	and.w	r0, r0, #31
 8000aea:	bf58      	it	pl
 8000aec:	4243      	negpl	r3, r0
 8000aee:	b25b      	sxtb	r3, r3
 8000af0:	fa01 f303 	lsl.w	r3, r1, r3
 8000af4:	4936      	ldr	r1, [pc, #216]	; (8000bd0 <NVIC_Init+0x29c>)
 8000af6:	4620      	mov	r0, r4
 8000af8:	4313      	orrs	r3, r2
 8000afa:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
 8000afe:	e000      	b.n	8000b02 <NVIC_Init+0x1ce>
				default:break;
 8000b00:	bf00      	nop
	for(NVIC_Cfg_Counter=0;NVIC_Cfg_Counter<NVIC_ACTIVATED_INT_SIZE;NVIC_Cfg_Counter++)
 8000b02:	79fb      	ldrb	r3, [r7, #7]
 8000b04:	3301      	adds	r3, #1
 8000b06:	71fb      	strb	r3, [r7, #7]
 8000b08:	79fb      	ldrb	r3, [r7, #7]
 8000b0a:	2b01      	cmp	r3, #1
 8000b0c:	f67f af1c 	bls.w	8000948 <NVIC_Init+0x14>
		}
	}
    
	/*TODO : Enable\Disable based on user configurations in NVIC_ENx and SCB_Sys Registers */
	for(NVIC_Cfg_Counter=0;NVIC_Cfg_Counter<NVIC_ACTIVATED_INT_SIZE;NVIC_Cfg_Counter++)
 8000b10:	2300      	movs	r3, #0
 8000b12:	71fb      	strb	r3, [r7, #7]
 8000b14:	e045      	b.n	8000ba2 <NVIC_Init+0x26e>
	{	
		InterruptNumber= NVIC_Cfg[NVIC_Cfg_Counter].interruptNumber;
 8000b16:	79fb      	ldrb	r3, [r7, #7]
 8000b18:	4a28      	ldr	r2, [pc, #160]	; (8000bbc <NVIC_Init+0x288>)
 8000b1a:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8000b1e:	717b      	strb	r3, [r7, #5]
		
		if(InterruptNumber>=0)
 8000b20:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	db39      	blt.n	8000b9c <NVIC_Init+0x268>
		{
			NVIC->NVIC_ISER[ InterruptNumber/8 ] &= ~(NVIC_ONE << (InterruptNumber%8));
 8000b28:	4a29      	ldr	r2, [pc, #164]	; (8000bd0 <NVIC_Init+0x29c>)
 8000b2a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	da00      	bge.n	8000b34 <NVIC_Init+0x200>
 8000b32:	3307      	adds	r3, #7
 8000b34:	10db      	asrs	r3, r3, #3
 8000b36:	b258      	sxtb	r0, r3
 8000b38:	4603      	mov	r3, r0
 8000b3a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b3e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000b42:	4259      	negs	r1, r3
 8000b44:	f003 0307 	and.w	r3, r3, #7
 8000b48:	f001 0107 	and.w	r1, r1, #7
 8000b4c:	bf58      	it	pl
 8000b4e:	424b      	negpl	r3, r1
 8000b50:	b25b      	sxtb	r3, r3
 8000b52:	4619      	mov	r1, r3
 8000b54:	2301      	movs	r3, #1
 8000b56:	408b      	lsls	r3, r1
 8000b58:	43db      	mvns	r3, r3
 8000b5a:	491d      	ldr	r1, [pc, #116]	; (8000bd0 <NVIC_Init+0x29c>)
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
			NVIC->NVIC_ISER[ InterruptNumber/8 ] |= InterruptState << (InterruptNumber%8) ;
 8000b62:	4a1b      	ldr	r2, [pc, #108]	; (8000bd0 <NVIC_Init+0x29c>)
 8000b64:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	da00      	bge.n	8000b6e <NVIC_Init+0x23a>
 8000b6c:	3307      	adds	r3, #7
 8000b6e:	10db      	asrs	r3, r3, #3
 8000b70:	b25c      	sxtb	r4, r3
 8000b72:	4623      	mov	r3, r4
 8000b74:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b78:	79b9      	ldrb	r1, [r7, #6]
 8000b7a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000b7e:	4258      	negs	r0, r3
 8000b80:	f003 0307 	and.w	r3, r3, #7
 8000b84:	f000 0007 	and.w	r0, r0, #7
 8000b88:	bf58      	it	pl
 8000b8a:	4243      	negpl	r3, r0
 8000b8c:	b25b      	sxtb	r3, r3
 8000b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b92:	490f      	ldr	r1, [pc, #60]	; (8000bd0 <NVIC_Init+0x29c>)
 8000b94:	4620      	mov	r0, r4
 8000b96:	4313      	orrs	r3, r2
 8000b98:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
	for(NVIC_Cfg_Counter=0;NVIC_Cfg_Counter<NVIC_ACTIVATED_INT_SIZE;NVIC_Cfg_Counter++)
 8000b9c:	79fb      	ldrb	r3, [r7, #7]
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	71fb      	strb	r3, [r7, #7]
 8000ba2:	79fb      	ldrb	r3, [r7, #7]
 8000ba4:	2b01      	cmp	r3, #1
 8000ba6:	d9b6      	bls.n	8000b16 <NVIC_Init+0x1e2>
		}
	}
}
 8000ba8:	bf00      	nop
 8000baa:	bf00      	nop
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bc90      	pop	{r4, r7}
 8000bb2:	4770      	bx	lr
 8000bb4:	e000ed0c 	.word	0xe000ed0c
 8000bb8:	08000e40 	.word	0x08000e40
 8000bbc:	08000e38 	.word	0x08000e38
 8000bc0:	fa05fd00 	.word	0xfa05fd00
 8000bc4:	e000ed00 	.word	0xe000ed00
 8000bc8:	e000ed24 	.word	0xe000ed24
 8000bcc:	e000e010 	.word	0xe000e010
 8000bd0:	e000e100 	.word	0xe000e100

08000bd4 <Port_Init>:
 *  @param        
 *  @param       
 *  @return      
 *********************************************************************************************************************/
void Port_Init(Port_ConfigType* ConfigArrayOfPtrs)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b086      	sub	sp, #24
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
    uint8_t PinId,PinOutputType,PinInitialLevel,PinMode,PinInternalAttach,PinOutputSpeed;
    uint8_t PinPort;
    uint8_t PinNumber; 
    GPIO_RegDef_t* UsedGpioPort_Ptr;
    for(uint8_t i=0; i<NUM_OF_USED_PINS;i++)
 8000bdc:	2300      	movs	r3, #0
 8000bde:	75fb      	strb	r3, [r7, #23]
 8000be0:	e0ab      	b.n	8000d3a <Port_Init+0x166>
    {
        PinId            =ConfigArrayOfPtrs[i].pinId;
 8000be2:	7dfa      	ldrb	r2, [r7, #23]
 8000be4:	4613      	mov	r3, r2
 8000be6:	00db      	lsls	r3, r3, #3
 8000be8:	1a9b      	subs	r3, r3, r2
 8000bea:	687a      	ldr	r2, [r7, #4]
 8000bec:	4413      	add	r3, r2
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	75bb      	strb	r3, [r7, #22]
        PinMode          =ConfigArrayOfPtrs[i].pinMode;
 8000bf2:	7dfa      	ldrb	r2, [r7, #23]
 8000bf4:	4613      	mov	r3, r2
 8000bf6:	00db      	lsls	r3, r3, #3
 8000bf8:	1a9b      	subs	r3, r3, r2
 8000bfa:	687a      	ldr	r2, [r7, #4]
 8000bfc:	4413      	add	r3, r2
 8000bfe:	78db      	ldrb	r3, [r3, #3]
 8000c00:	757b      	strb	r3, [r7, #21]
        PinInternalAttach=ConfigArrayOfPtrs[i].pinInternalAttach;
 8000c02:	7dfa      	ldrb	r2, [r7, #23]
 8000c04:	4613      	mov	r3, r2
 8000c06:	00db      	lsls	r3, r3, #3
 8000c08:	1a9b      	subs	r3, r3, r2
 8000c0a:	687a      	ldr	r2, [r7, #4]
 8000c0c:	4413      	add	r3, r2
 8000c0e:	795b      	ldrb	r3, [r3, #5]
 8000c10:	753b      	strb	r3, [r7, #20]
        PinOutputSpeed   =ConfigArrayOfPtrs[i].pinOutputSpeed;
 8000c12:	7dfa      	ldrb	r2, [r7, #23]
 8000c14:	4613      	mov	r3, r2
 8000c16:	00db      	lsls	r3, r3, #3
 8000c18:	1a9b      	subs	r3, r3, r2
 8000c1a:	687a      	ldr	r2, [r7, #4]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	799b      	ldrb	r3, [r3, #6]
 8000c20:	74fb      	strb	r3, [r7, #19]
        PinOutputType    =ConfigArrayOfPtrs[i].OutputType;
 8000c22:	7dfa      	ldrb	r2, [r7, #23]
 8000c24:	4613      	mov	r3, r2
 8000c26:	00db      	lsls	r3, r3, #3
 8000c28:	1a9b      	subs	r3, r3, r2
 8000c2a:	687a      	ldr	r2, [r7, #4]
 8000c2c:	4413      	add	r3, r2
 8000c2e:	789b      	ldrb	r3, [r3, #2]
 8000c30:	74bb      	strb	r3, [r7, #18]

        PinPort          = PinId/PIN_PORT_CONST;
 8000c32:	7dbb      	ldrb	r3, [r7, #22]
 8000c34:	091b      	lsrs	r3, r3, #4
 8000c36:	747b      	strb	r3, [r7, #17]
        PinNumber        = PinId%PIN_PORT_CONST; 
 8000c38:	7dbb      	ldrb	r3, [r7, #22]
 8000c3a:	f003 030f 	and.w	r3, r3, #15
 8000c3e:	743b      	strb	r3, [r7, #16]

        UsedGpioPort_Ptr = GPIOx(PinPort*GPIO_OFFSET);
 8000c40:	7c7b      	ldrb	r3, [r7, #17]
 8000c42:	029b      	lsls	r3, r3, #10
 8000c44:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000c48:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000c4c:	60fb      	str	r3, [r7, #12]
        /*Pin mode*/
        UsedGpioPort_Ptr->MODER &=~(PORT_CONST_3<< (PORT_CONST_2*PinNumber));
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	7c3a      	ldrb	r2, [r7, #16]
 8000c54:	0052      	lsls	r2, r2, #1
 8000c56:	2103      	movs	r1, #3
 8000c58:	fa01 f202 	lsl.w	r2, r1, r2
 8000c5c:	43d2      	mvns	r2, r2
 8000c5e:	401a      	ands	r2, r3
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	601a      	str	r2, [r3, #0]
        UsedGpioPort_Ptr->MODER |=PinMode<< (PORT_CONST_2*PinNumber);
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	7d79      	ldrb	r1, [r7, #21]
 8000c6a:	7c3a      	ldrb	r2, [r7, #16]
 8000c6c:	0052      	lsls	r2, r2, #1
 8000c6e:	fa01 f202 	lsl.w	r2, r1, r2
 8000c72:	431a      	orrs	r2, r3
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	601a      	str	r2, [r3, #0]
        /*Pin Pull up or pull down*/
        UsedGpioPort_Ptr->PUPDR &=~(PORT_CONST_3   <<(PORT_CONST_2*PinNumber));
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	68db      	ldr	r3, [r3, #12]
 8000c7c:	7c3a      	ldrb	r2, [r7, #16]
 8000c7e:	0052      	lsls	r2, r2, #1
 8000c80:	2103      	movs	r1, #3
 8000c82:	fa01 f202 	lsl.w	r2, r1, r2
 8000c86:	43d2      	mvns	r2, r2
 8000c88:	401a      	ands	r2, r3
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	60da      	str	r2, [r3, #12]
        UsedGpioPort_Ptr->PUPDR |=PinInternalAttach<<(PORT_CONST_2*PinNumber);
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	68db      	ldr	r3, [r3, #12]
 8000c92:	7d39      	ldrb	r1, [r7, #20]
 8000c94:	7c3a      	ldrb	r2, [r7, #16]
 8000c96:	0052      	lsls	r2, r2, #1
 8000c98:	fa01 f202 	lsl.w	r2, r1, r2
 8000c9c:	431a      	orrs	r2, r3
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	60da      	str	r2, [r3, #12]
        
        switch(PinMode)
 8000ca2:	7d7b      	ldrb	r3, [r7, #21]
 8000ca4:	2b03      	cmp	r3, #3
 8000ca6:	d844      	bhi.n	8000d32 <Port_Init+0x15e>
 8000ca8:	a201      	add	r2, pc, #4	; (adr r2, 8000cb0 <Port_Init+0xdc>)
 8000caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cae:	bf00      	nop
 8000cb0:	08000d33 	.word	0x08000d33
 8000cb4:	08000cc1 	.word	0x08000cc1
 8000cb8:	08000d33 	.word	0x08000d33
 8000cbc:	08000d33 	.word	0x08000d33
        {
            case Port_PIN_MODE_INPUT: /*Do Nothing*/break;
            case Port_PIN_MODE_GENERAL_PURPOSE_OUTPUT:
                /*Pin Output type*/
                UsedGpioPort_Ptr->OTYPER&=~(PORT_CONST_1<< (PORT_CONST_2*PinNumber));
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	7c3a      	ldrb	r2, [r7, #16]
 8000cc6:	0052      	lsls	r2, r2, #1
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fa01 f202 	lsl.w	r2, r1, r2
 8000cce:	43d2      	mvns	r2, r2
 8000cd0:	401a      	ands	r2, r3
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	605a      	str	r2, [r3, #4]
                UsedGpioPort_Ptr->OTYPER|= (PinOutputType<<(PORT_CONST_2*PinNumber));
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	7cb9      	ldrb	r1, [r7, #18]
 8000cdc:	7c3a      	ldrb	r2, [r7, #16]
 8000cde:	0052      	lsls	r2, r2, #1
 8000ce0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ce4:	431a      	orrs	r2, r3
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	605a      	str	r2, [r3, #4]
                /*Set initial value*/
                PinInitialLevel  =ConfigArrayOfPtrs[i].pinInitialLevel;
 8000cea:	7dfa      	ldrb	r2, [r7, #23]
 8000cec:	4613      	mov	r3, r2
 8000cee:	00db      	lsls	r3, r3, #3
 8000cf0:	1a9b      	subs	r3, r3, r2
 8000cf2:	687a      	ldr	r2, [r7, #4]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	791b      	ldrb	r3, [r3, #4]
 8000cf8:	72fb      	strb	r3, [r7, #11]
                Dio_WriteChannel(PinId,PinInitialLevel);
 8000cfa:	7afa      	ldrb	r2, [r7, #11]
 8000cfc:	7dbb      	ldrb	r3, [r7, #22]
 8000cfe:	4611      	mov	r1, r2
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff fb0d 	bl	8000320 <Dio_WriteChannel>
                /*Pin Speed*/
                UsedGpioPort_Ptr->OSPEEDR &=~(PORT_CONST_3<< (PORT_CONST_2*PinNumber));
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	689b      	ldr	r3, [r3, #8]
 8000d0a:	7c3a      	ldrb	r2, [r7, #16]
 8000d0c:	0052      	lsls	r2, r2, #1
 8000d0e:	2103      	movs	r1, #3
 8000d10:	fa01 f202 	lsl.w	r2, r1, r2
 8000d14:	43d2      	mvns	r2, r2
 8000d16:	401a      	ands	r2, r3
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	609a      	str	r2, [r3, #8]
                UsedGpioPort_Ptr->OSPEEDR |=PinOutputSpeed<< (PORT_CONST_2*PinNumber);
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	689b      	ldr	r3, [r3, #8]
 8000d20:	7cf9      	ldrb	r1, [r7, #19]
 8000d22:	7c3a      	ldrb	r2, [r7, #16]
 8000d24:	0052      	lsls	r2, r2, #1
 8000d26:	fa01 f202 	lsl.w	r2, r1, r2
 8000d2a:	431a      	orrs	r2, r3
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	609a      	str	r2, [r3, #8]
                break;
 8000d30:	e000      	b.n	8000d34 <Port_Init+0x160>
            case Port_PIN_MODE_ALTERNATE_FUNCTION: /*Not Available*/ break;
            case Port_PIN_MODE_ANALOG:             /*Not Available*/ break;
            default:break;
 8000d32:	bf00      	nop
    for(uint8_t i=0; i<NUM_OF_USED_PINS;i++)
 8000d34:	7dfb      	ldrb	r3, [r7, #23]
 8000d36:	3301      	adds	r3, #1
 8000d38:	75fb      	strb	r3, [r7, #23]
 8000d3a:	7dfb      	ldrb	r3, [r7, #23]
 8000d3c:	2b04      	cmp	r3, #4
 8000d3e:	f67f af50 	bls.w	8000be2 <Port_Init+0xe>
        }


    }

}
 8000d42:	bf00      	nop
 8000d44:	bf00      	nop
 8000d46:	3718      	adds	r7, #24
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d4c:	480d      	ldr	r0, [pc, #52]	; (8000d84 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d4e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d50:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d54:	480c      	ldr	r0, [pc, #48]	; (8000d88 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d56:	490d      	ldr	r1, [pc, #52]	; (8000d8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d58:	4a0d      	ldr	r2, [pc, #52]	; (8000d90 <LoopForever+0xe>)
  movs r3, #0
 8000d5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d5c:	e002      	b.n	8000d64 <LoopCopyDataInit>

08000d5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d62:	3304      	adds	r3, #4

08000d64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d68:	d3f9      	bcc.n	8000d5e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d6a:	4a0a      	ldr	r2, [pc, #40]	; (8000d94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d6c:	4c0a      	ldr	r4, [pc, #40]	; (8000d98 <LoopForever+0x16>)
  movs r3, #0
 8000d6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d70:	e001      	b.n	8000d76 <LoopFillZerobss>

08000d72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d74:	3204      	adds	r2, #4

08000d76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d78:	d3fb      	bcc.n	8000d72 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d7a:	f000 f811 	bl	8000da0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d7e:	f7ff fa5d 	bl	800023c <main>

08000d82 <LoopForever>:

LoopForever:
    b LoopForever
 8000d82:	e7fe      	b.n	8000d82 <LoopForever>
  ldr   r0, =_estack
 8000d84:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000d88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d8c:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8000d90:	08000e4c 	.word	0x08000e4c
  ldr r2, =_sbss
 8000d94:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8000d98:	20000048 	.word	0x20000048

08000d9c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d9c:	e7fe      	b.n	8000d9c <ADC_IRQHandler>
	...

08000da0 <__libc_init_array>:
 8000da0:	b570      	push	{r4, r5, r6, lr}
 8000da2:	4d0d      	ldr	r5, [pc, #52]	; (8000dd8 <__libc_init_array+0x38>)
 8000da4:	4c0d      	ldr	r4, [pc, #52]	; (8000ddc <__libc_init_array+0x3c>)
 8000da6:	1b64      	subs	r4, r4, r5
 8000da8:	10a4      	asrs	r4, r4, #2
 8000daa:	2600      	movs	r6, #0
 8000dac:	42a6      	cmp	r6, r4
 8000dae:	d109      	bne.n	8000dc4 <__libc_init_array+0x24>
 8000db0:	4d0b      	ldr	r5, [pc, #44]	; (8000de0 <__libc_init_array+0x40>)
 8000db2:	4c0c      	ldr	r4, [pc, #48]	; (8000de4 <__libc_init_array+0x44>)
 8000db4:	f000 f818 	bl	8000de8 <_init>
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	10a4      	asrs	r4, r4, #2
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	42a6      	cmp	r6, r4
 8000dc0:	d105      	bne.n	8000dce <__libc_init_array+0x2e>
 8000dc2:	bd70      	pop	{r4, r5, r6, pc}
 8000dc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8000dc8:	4798      	blx	r3
 8000dca:	3601      	adds	r6, #1
 8000dcc:	e7ee      	b.n	8000dac <__libc_init_array+0xc>
 8000dce:	f855 3b04 	ldr.w	r3, [r5], #4
 8000dd2:	4798      	blx	r3
 8000dd4:	3601      	adds	r6, #1
 8000dd6:	e7f2      	b.n	8000dbe <__libc_init_array+0x1e>
 8000dd8:	08000e44 	.word	0x08000e44
 8000ddc:	08000e44 	.word	0x08000e44
 8000de0:	08000e44 	.word	0x08000e44
 8000de4:	08000e48 	.word	0x08000e48

08000de8 <_init>:
 8000de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dea:	bf00      	nop
 8000dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dee:	bc08      	pop	{r3}
 8000df0:	469e      	mov	lr, r3
 8000df2:	4770      	bx	lr

08000df4 <_fini>:
 8000df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000df6:	bf00      	nop
 8000df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dfa:	bc08      	pop	{r3}
 8000dfc:	469e      	mov	lr, r3
 8000dfe:	4770      	bx	lr
