
FWD_Internship.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b10  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08000cd4  08000cd4  00010cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000d18  08000d18  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08000d18  08000d18  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000d18  08000d18  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d18  08000d18  00010d18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000d1c  08000d1c  00010d1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08000d20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000024  08000d44  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000040  08000d44  00020040  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   000036f6  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000008ce  00000000  00000000  0002374a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000178  00000000  00000000  00024018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000d8  00000000  00000000  00024190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000018fa  00000000  00000000  00024268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002a56  00000000  00000000  00025b62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00006efb  00000000  00000000  000285b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0002f4b3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000328  00000000  00000000  0002f508  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000024 	.word	0x20000024
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000cbc 	.word	0x08000cbc

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000028 	.word	0x20000028
 8000200:	08000cbc 	.word	0x08000cbc

08000204 <main>:
#include "main.h"
void SysTick_Handler(void);
extern Port_ConfigType AllPinConfigs[NUM_OF_USED_PINS];
extern const Gpt_ConfigType    Gpt_Configs;
int main()
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
    NVIC_Init();
 8000208:	f000 fadc 	bl	80007c4 <NVIC_Init>
    RCC->RCC_AHB1ENR |=(1<<0);/*GPIOAEN*/
 800020c:	4b12      	ldr	r3, [pc, #72]	; (8000258 <main+0x54>)
 800020e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000210:	4a11      	ldr	r2, [pc, #68]	; (8000258 <main+0x54>)
 8000212:	f043 0301 	orr.w	r3, r3, #1
 8000216:	6313      	str	r3, [r2, #48]	; 0x30
    RCC->RCC_APB1ENR |=(1<<2);/*TIM4EN*/
 8000218:	4b0f      	ldr	r3, [pc, #60]	; (8000258 <main+0x54>)
 800021a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800021c:	4a0e      	ldr	r2, [pc, #56]	; (8000258 <main+0x54>)
 800021e:	f043 0304 	orr.w	r3, r3, #4
 8000222:	6413      	str	r3, [r2, #64]	; 0x40
    Port_Init(&AllPinConfigs);
 8000224:	480d      	ldr	r0, [pc, #52]	; (800025c <main+0x58>)
 8000226:	f000 fc3f 	bl	8000aa8 <Port_Init>
    Gpt_Init(&Gpt_Configs);
 800022a:	480d      	ldr	r0, [pc, #52]	; (8000260 <main+0x5c>)
 800022c:	f000 f8aa 	bl	8000384 <Gpt_Init>
    Dio_ReadChannel(Dio_CHANNEL_PA5);
 8000230:	2005      	movs	r0, #5
 8000232:	f000 f827 	bl	8000284 <Dio_ReadChannel>
	Gpt_EnableNotification(GPT_TIMER_CHANNEL_15);
 8000236:	200f      	movs	r0, #15
 8000238:	f000 fa36 	bl	80006a8 <Gpt_EnableNotification>
	Gpt_EnableNotification(GPT_TIMER_CHANNEL_4);
 800023c:	2004      	movs	r0, #4
 800023e:	f000 fa33 	bl	80006a8 <Gpt_EnableNotification>
    Gpt_StartTimer(GPT_TIMER_CHANNEL_15, 1000000);
 8000242:	4908      	ldr	r1, [pc, #32]	; (8000264 <main+0x60>)
 8000244:	200f      	movs	r0, #15
 8000246:	f000 f9a1 	bl	800058c <Gpt_StartTimer>
    Gpt_StartTimer(GPT_TIMER_CHANNEL_4, 1000);
 800024a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800024e:	2004      	movs	r0, #4
 8000250:	f000 f99c 	bl	800058c <Gpt_StartTimer>

    while(1)
 8000254:	e7fe      	b.n	8000254 <main+0x50>
 8000256:	bf00      	nop
 8000258:	40023800 	.word	0x40023800
 800025c:	20000000 	.word	0x20000000
 8000260:	08000d04 	.word	0x08000d04
 8000264:	000f4240 	.word	0x000f4240

08000268 <SysTick_Handler>:
    {

    }
} 
void SysTick_Handler(void)
{
 8000268:	b480      	push	{r7}
 800026a:	af00      	add	r7, sp, #0
	//Dio_FlipChannel(Dio_CHANNEL_PA5);
}
 800026c:	bf00      	nop
 800026e:	46bd      	mov	sp, r7
 8000270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000274:	4770      	bx	lr

08000276 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
 8000276:	b580      	push	{r7, lr}
 8000278:	af00      	add	r7, sp, #0
	Dio_FlipChannel(Dio_CHANNEL_PA5);
 800027a:	2005      	movs	r0, #5
 800027c:	f000 f84d 	bl	800031a <Dio_FlipChannel>
}
 8000280:	bf00      	nop
 8000282:	bd80      	pop	{r7, pc}

08000284 <Dio_ReadChannel>:
 *  @usage       
 *  @param   ChannelId     
 *  @return      
 *********************************************************************************************************************/
Dio_LevelType Dio_ReadChannel(Dio_ChannelType ChannelId)
{
 8000284:	b480      	push	{r7}
 8000286:	b085      	sub	sp, #20
 8000288:	af00      	add	r7, sp, #0
 800028a:	4603      	mov	r3, r0
 800028c:	71fb      	strb	r3, [r7, #7]
    uint8_t ChannelPort   = ChannelId/BSRR_CHANNEL;
 800028e:	79fb      	ldrb	r3, [r7, #7]
 8000290:	091b      	lsrs	r3, r3, #4
 8000292:	73fb      	strb	r3, [r7, #15]
    uint8_t ChannelNumber = ChannelId%BSRR_CHANNEL;
 8000294:	79fb      	ldrb	r3, [r7, #7]
 8000296:	f003 030f 	and.w	r3, r3, #15
 800029a:	73bb      	strb	r3, [r7, #14]

    GPIO_RegDef_t* UsedGpioPort_Ptr = GPIOx(ChannelPort*GPIO_OFFSET);
 800029c:	7bfb      	ldrb	r3, [r7, #15]
 800029e:	029b      	lsls	r3, r3, #10
 80002a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80002a4:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80002a8:	60bb      	str	r3, [r7, #8]

    return (DIO_CONST_1) & ((UsedGpioPort_Ptr->IDR)>>ChannelNumber);
 80002aa:	68bb      	ldr	r3, [r7, #8]
 80002ac:	691a      	ldr	r2, [r3, #16]
 80002ae:	7bbb      	ldrb	r3, [r7, #14]
 80002b0:	fa22 f303 	lsr.w	r3, r2, r3
 80002b4:	b2db      	uxtb	r3, r3
 80002b6:	f003 0301 	and.w	r3, r3, #1
 80002ba:	b2db      	uxtb	r3, r3
}
 80002bc:	4618      	mov	r0, r3
 80002be:	3714      	adds	r7, #20
 80002c0:	46bd      	mov	sp, r7
 80002c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c6:	4770      	bx	lr

080002c8 <Dio_WriteChannel>:
 *  @param        
 *  @param       
 *  @return      
 *********************************************************************************************************************/
void Dio_WriteChannel(Dio_ChannelType ChannelId, Dio_LevelType Level )
{
 80002c8:	b480      	push	{r7}
 80002ca:	b087      	sub	sp, #28
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	4603      	mov	r3, r0
 80002d0:	460a      	mov	r2, r1
 80002d2:	71fb      	strb	r3, [r7, #7]
 80002d4:	4613      	mov	r3, r2
 80002d6:	71bb      	strb	r3, [r7, #6]
    uint8_t ChannelPort   = ChannelId/BSRR_CHANNEL;
 80002d8:	79fb      	ldrb	r3, [r7, #7]
 80002da:	091b      	lsrs	r3, r3, #4
 80002dc:	75fb      	strb	r3, [r7, #23]
    uint8_t ChannelNumber = ChannelId%BSRR_CHANNEL;
 80002de:	79fb      	ldrb	r3, [r7, #7]
 80002e0:	f003 030f 	and.w	r3, r3, #15
 80002e4:	75bb      	strb	r3, [r7, #22]
    GPIO_RegDef_t* UsedGpioPort_Ptr = GPIOx(ChannelPort*GPIO_OFFSET);
 80002e6:	7dfb      	ldrb	r3, [r7, #23]
 80002e8:	029b      	lsls	r3, r3, #10
 80002ea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80002ee:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80002f2:	613b      	str	r3, [r7, #16]
    uint32_t BSSR_Val=0;
 80002f4:	2300      	movs	r3, #0
 80002f6:	60fb      	str	r3, [r7, #12]

    BSSR_Val     = DIO_CONST_1 << (ChannelNumber+Level*BSRR_CHANNEL);
 80002f8:	7dba      	ldrb	r2, [r7, #22]
 80002fa:	79bb      	ldrb	r3, [r7, #6]
 80002fc:	011b      	lsls	r3, r3, #4
 80002fe:	4413      	add	r3, r2
 8000300:	2201      	movs	r2, #1
 8000302:	fa02 f303 	lsl.w	r3, r2, r3
 8000306:	60fb      	str	r3, [r7, #12]
    UsedGpioPort_Ptr->BSRR= BSSR_Val;
 8000308:	693b      	ldr	r3, [r7, #16]
 800030a:	68fa      	ldr	r2, [r7, #12]
 800030c:	619a      	str	r2, [r3, #24]
}
 800030e:	bf00      	nop
 8000310:	371c      	adds	r7, #28
 8000312:	46bd      	mov	sp, r7
 8000314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000318:	4770      	bx	lr

0800031a <Dio_FlipChannel>:
 *  @param        
 *  @param       
 *  @return      
 *********************************************************************************************************************/
Dio_LevelType Dio_FlipChannel(Dio_ChannelType ChannelId)
{
 800031a:	b480      	push	{r7}
 800031c:	b087      	sub	sp, #28
 800031e:	af00      	add	r7, sp, #0
 8000320:	4603      	mov	r3, r0
 8000322:	71fb      	strb	r3, [r7, #7]
    uint8_t ChannelPort   = ChannelId/BSRR_CHANNEL;
 8000324:	79fb      	ldrb	r3, [r7, #7]
 8000326:	091b      	lsrs	r3, r3, #4
 8000328:	75fb      	strb	r3, [r7, #23]
    uint8_t ChannelNumber = ChannelId%BSRR_CHANNEL;
 800032a:	79fb      	ldrb	r3, [r7, #7]
 800032c:	f003 030f 	and.w	r3, r3, #15
 8000330:	75bb      	strb	r3, [r7, #22]
    GPIO_RegDef_t* UsedGpioPort_Ptr = GPIOx(ChannelPort*GPIO_OFFSET);
 8000332:	7dfb      	ldrb	r3, [r7, #23]
 8000334:	029b      	lsls	r3, r3, #10
 8000336:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800033a:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800033e:	613b      	str	r3, [r7, #16]
    uint8_t ChannelVal=0;
 8000340:	2300      	movs	r3, #0
 8000342:	73fb      	strb	r3, [r7, #15]
    uint32_t BSSR_Val=0;
 8000344:	2300      	movs	r3, #0
 8000346:	60bb      	str	r3, [r7, #8]

    ChannelVal= (DIO_CONST_1) & ((UsedGpioPort_Ptr->ODR)>>ChannelNumber);
 8000348:	693b      	ldr	r3, [r7, #16]
 800034a:	695a      	ldr	r2, [r3, #20]
 800034c:	7dbb      	ldrb	r3, [r7, #22]
 800034e:	fa22 f303 	lsr.w	r3, r2, r3
 8000352:	b2db      	uxtb	r3, r3
 8000354:	f003 0301 	and.w	r3, r3, #1
 8000358:	73fb      	strb	r3, [r7, #15]
    BSSR_Val      = DIO_CONST_1 << (ChannelNumber+ (ChannelVal)*BSRR_CHANNEL);
 800035a:	7dba      	ldrb	r2, [r7, #22]
 800035c:	7bfb      	ldrb	r3, [r7, #15]
 800035e:	011b      	lsls	r3, r3, #4
 8000360:	4413      	add	r3, r2
 8000362:	2201      	movs	r2, #1
 8000364:	fa02 f303 	lsl.w	r3, r2, r3
 8000368:	60bb      	str	r3, [r7, #8]
    UsedGpioPort_Ptr->BSRR = BSSR_Val;
 800036a:	693b      	ldr	r3, [r7, #16]
 800036c:	68ba      	ldr	r2, [r7, #8]
 800036e:	619a      	str	r2, [r3, #24]
    return ~ChannelVal;
 8000370:	7bfb      	ldrb	r3, [r7, #15]
 8000372:	43db      	mvns	r3, r3
 8000374:	b2db      	uxtb	r3, r3
}
 8000376:	4618      	mov	r0, r3
 8000378:	371c      	adds	r7, #28
 800037a:	46bd      	mov	sp, r7
 800037c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000380:	4770      	bx	lr
	...

08000384 <Gpt_Init>:
*  @retval             : None
*  Description         : Initializes the GPT driver.
*********************************************************************************************************************** 
*/
void Gpt_Init(const Gpt_ConfigType *CfgPtr)
{
 8000384:	b480      	push	{r7}
 8000386:	b08d      	sub	sp, #52	; 0x34
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
    uint8_t               ChannelsCount =CfgPtr->GptChannelCount;
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	685b      	ldr	r3, [r3, #4]
 8000390:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    Gpt_ChannelConfigType* ChannelCfgPtr=CfgPtr->GptChannelCfgPtr;
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	627b      	str	r3, [r7, #36]	; 0x24
    Gpt_ChannelModeType  ChannelMode;
    Gpt_NotifyType       NotificationFn;
    uint8_t              Prescale;

    TIM_RegDef_t*   UsedTimerRegSet;
    for(uint8_t i=0; i<ChannelsCount;i++)
 800039a:	2300      	movs	r3, #0
 800039c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80003a0:	e0ca      	b.n	8000538 <Gpt_Init+0x1b4>
    {
        ChannelId           =ChannelCfgPtr[i].GptChannelId;
 80003a2:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80003a6:	4613      	mov	r3, r2
 80003a8:	005b      	lsls	r3, r3, #1
 80003aa:	4413      	add	r3, r2
 80003ac:	00db      	lsls	r3, r3, #3
 80003ae:	461a      	mov	r2, r3
 80003b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003b2:	4413      	add	r3, r2
 80003b4:	781b      	ldrb	r3, [r3, #0]
 80003b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        ChannelTickFrequency=ChannelCfgPtr[i].GptChannelTickFrequency;
 80003ba:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80003be:	4613      	mov	r3, r2
 80003c0:	005b      	lsls	r3, r3, #1
 80003c2:	4413      	add	r3, r2
 80003c4:	00db      	lsls	r3, r3, #3
 80003c6:	461a      	mov	r2, r3
 80003c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003ca:	4413      	add	r3, r2
 80003cc:	685b      	ldr	r3, [r3, #4]
 80003ce:	61fb      	str	r3, [r7, #28]
        ChannelTickValueMax =ChannelCfgPtr[i].GptChannelTickValueMax;
 80003d0:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80003d4:	4613      	mov	r3, r2
 80003d6:	005b      	lsls	r3, r3, #1
 80003d8:	4413      	add	r3, r2
 80003da:	00db      	lsls	r3, r3, #3
 80003dc:	461a      	mov	r2, r3
 80003de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003e0:	4413      	add	r3, r2
 80003e2:	689b      	ldr	r3, [r3, #8]
 80003e4:	61bb      	str	r3, [r7, #24]
        ChannelMode         =ChannelCfgPtr[i].GptChannelMode;
 80003e6:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80003ea:	4613      	mov	r3, r2
 80003ec:	005b      	lsls	r3, r3, #1
 80003ee:	4413      	add	r3, r2
 80003f0:	00db      	lsls	r3, r3, #3
 80003f2:	461a      	mov	r2, r3
 80003f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003f6:	4413      	add	r3, r2
 80003f8:	7b1b      	ldrb	r3, [r3, #12]
 80003fa:	75fb      	strb	r3, [r7, #23]
        NotificationFn      =ChannelCfgPtr[i].GptNotificationFn;
 80003fc:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8000400:	4613      	mov	r3, r2
 8000402:	005b      	lsls	r3, r3, #1
 8000404:	4413      	add	r3, r2
 8000406:	00db      	lsls	r3, r3, #3
 8000408:	461a      	mov	r2, r3
 800040a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800040c:	4413      	add	r3, r2
 800040e:	691b      	ldr	r3, [r3, #16]
 8000410:	613b      	str	r3, [r7, #16]
        Prescale            =ChannelCfgPtr[i].GptPrescale;
 8000412:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8000416:	4613      	mov	r3, r2
 8000418:	005b      	lsls	r3, r3, #1
 800041a:	4413      	add	r3, r2
 800041c:	00db      	lsls	r3, r3, #3
 800041e:	461a      	mov	r2, r3
 8000420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000422:	4413      	add	r3, r2
 8000424:	7d1b      	ldrb	r3, [r3, #20]
 8000426:	73fb      	strb	r3, [r7, #15]
        /************/
        switch(ChannelId)
 8000428:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800042c:	3b01      	subs	r3, #1
 800042e:	2b0e      	cmp	r3, #14
 8000430:	d84b      	bhi.n	80004ca <Gpt_Init+0x146>
 8000432:	a201      	add	r2, pc, #4	; (adr r2, 8000438 <Gpt_Init+0xb4>)
 8000434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000438:	08000475 	.word	0x08000475
 800043c:	0800047b 	.word	0x0800047b
 8000440:	08000483 	.word	0x08000483
 8000444:	08000489 	.word	0x08000489
 8000448:	0800048f 	.word	0x0800048f
 800044c:	08000495 	.word	0x08000495
 8000450:	0800049b 	.word	0x0800049b
 8000454:	080004a1 	.word	0x080004a1
 8000458:	080004a7 	.word	0x080004a7
 800045c:	080004ad 	.word	0x080004ad
 8000460:	080004b3 	.word	0x080004b3
 8000464:	080004b9 	.word	0x080004b9
 8000468:	080004bf 	.word	0x080004bf
 800046c:	080004c5 	.word	0x080004c5
 8000470:	080004cb 	.word	0x080004cb
        {
            case GPT_TIMER_CHANNEL_1 : UsedTimerRegSet =TIM1 ;break;
 8000474:	4b37      	ldr	r3, [pc, #220]	; (8000554 <Gpt_Init+0x1d0>)
 8000476:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000478:	e028      	b.n	80004cc <Gpt_Init+0x148>
            case GPT_TIMER_CHANNEL_2 : UsedTimerRegSet =TIM2 ;break;
 800047a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800047e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000480:	e024      	b.n	80004cc <Gpt_Init+0x148>
            case GPT_TIMER_CHANNEL_3 : UsedTimerRegSet =TIM3 ;break;
 8000482:	4b35      	ldr	r3, [pc, #212]	; (8000558 <Gpt_Init+0x1d4>)
 8000484:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000486:	e021      	b.n	80004cc <Gpt_Init+0x148>
            case GPT_TIMER_CHANNEL_4 : UsedTimerRegSet =TIM4 ;break;
 8000488:	4b34      	ldr	r3, [pc, #208]	; (800055c <Gpt_Init+0x1d8>)
 800048a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800048c:	e01e      	b.n	80004cc <Gpt_Init+0x148>
            case GPT_TIMER_CHANNEL_5 : UsedTimerRegSet =TIM5 ;break;
 800048e:	4b34      	ldr	r3, [pc, #208]	; (8000560 <Gpt_Init+0x1dc>)
 8000490:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000492:	e01b      	b.n	80004cc <Gpt_Init+0x148>
            case GPT_TIMER_CHANNEL_6 : UsedTimerRegSet =TIM6 ;break;
 8000494:	4b33      	ldr	r3, [pc, #204]	; (8000564 <Gpt_Init+0x1e0>)
 8000496:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000498:	e018      	b.n	80004cc <Gpt_Init+0x148>
            case GPT_TIMER_CHANNEL_7 : UsedTimerRegSet =TIM7 ;break;
 800049a:	4b33      	ldr	r3, [pc, #204]	; (8000568 <Gpt_Init+0x1e4>)
 800049c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800049e:	e015      	b.n	80004cc <Gpt_Init+0x148>
            case GPT_TIMER_CHANNEL_8 : UsedTimerRegSet =TIM8 ;break;
 80004a0:	4b32      	ldr	r3, [pc, #200]	; (800056c <Gpt_Init+0x1e8>)
 80004a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80004a4:	e012      	b.n	80004cc <Gpt_Init+0x148>
            case GPT_TIMER_CHANNEL_9 : UsedTimerRegSet =TIM9 ;break;
 80004a6:	4b32      	ldr	r3, [pc, #200]	; (8000570 <Gpt_Init+0x1ec>)
 80004a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80004aa:	e00f      	b.n	80004cc <Gpt_Init+0x148>
            case GPT_TIMER_CHANNEL_10: UsedTimerRegSet =TIM10;break;
 80004ac:	4b31      	ldr	r3, [pc, #196]	; (8000574 <Gpt_Init+0x1f0>)
 80004ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80004b0:	e00c      	b.n	80004cc <Gpt_Init+0x148>
            case GPT_TIMER_CHANNEL_11: UsedTimerRegSet =TIM11;break;
 80004b2:	4b31      	ldr	r3, [pc, #196]	; (8000578 <Gpt_Init+0x1f4>)
 80004b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80004b6:	e009      	b.n	80004cc <Gpt_Init+0x148>
            case GPT_TIMER_CHANNEL_12: UsedTimerRegSet =TIM12;break;
 80004b8:	4b30      	ldr	r3, [pc, #192]	; (800057c <Gpt_Init+0x1f8>)
 80004ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80004bc:	e006      	b.n	80004cc <Gpt_Init+0x148>
            case GPT_TIMER_CHANNEL_13: UsedTimerRegSet =TIM13;break;
 80004be:	4b30      	ldr	r3, [pc, #192]	; (8000580 <Gpt_Init+0x1fc>)
 80004c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80004c2:	e003      	b.n	80004cc <Gpt_Init+0x148>
            case GPT_TIMER_CHANNEL_14: UsedTimerRegSet =TIM14;break;
 80004c4:	4b2f      	ldr	r3, [pc, #188]	; (8000584 <Gpt_Init+0x200>)
 80004c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80004c8:	e000      	b.n	80004cc <Gpt_Init+0x148>
            case GPT_TIMER_CHANNEL_15: /*********/;break;default:break;
 80004ca:	bf00      	nop
        }
        if(ChannelId==GPT_SYSTICK_TIMER)
 80004cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80004d0:	2b0f      	cmp	r3, #15
 80004d2:	d10c      	bne.n	80004ee <Gpt_Init+0x16a>
        {
            SYSTICK ->STK_CTRL &=~(STCR_MASK<<STCR_CLKSOURCE_PIN_ACCESS);
 80004d4:	4b2c      	ldr	r3, [pc, #176]	; (8000588 <Gpt_Init+0x204>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a2b      	ldr	r2, [pc, #172]	; (8000588 <Gpt_Init+0x204>)
 80004da:	f023 0304 	bic.w	r3, r3, #4
 80004de:	6013      	str	r3, [r2, #0]
            SYSTICK ->STK_CTRL &=~(STCR_MASK<<STCR_TICKINT_PIN_ACCESS  );
 80004e0:	4b29      	ldr	r3, [pc, #164]	; (8000588 <Gpt_Init+0x204>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a28      	ldr	r2, [pc, #160]	; (8000588 <Gpt_Init+0x204>)
 80004e6:	f023 0302 	bic.w	r3, r3, #2
 80004ea:	6013      	str	r3, [r2, #0]
 80004ec:	e01f      	b.n	800052e <Gpt_Init+0x1aa>
        }
        else
        {
        UsedTimerRegSet->CR1 &=~(CR1_ARPE_MASK<<CR1_ARPE_BIT_ACCESS); 
 80004ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80004f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80004f8:	601a      	str	r2, [r3, #0]
        UsedTimerRegSet->CR1 |= (ChannelMode<<CR1_ARPE_BIT_ACCESS);
 80004fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	7dfa      	ldrb	r2, [r7, #23]
 8000500:	01d2      	lsls	r2, r2, #7
 8000502:	431a      	orrs	r2, r3
 8000504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000506:	601a      	str	r2, [r3, #0]
        UsedTimerRegSet->CR1 &=~(CR1_OPM_MASK<<CR1_OPM_BIT_ACCESS); 
 8000508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	f023 0208 	bic.w	r2, r3, #8
 8000510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000512:	601a      	str	r2, [r3, #0]
        UsedTimerRegSet->CR1 |= (ChannelMode <<CR1_OPM_BIT_ACCESS);
 8000514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	7dfa      	ldrb	r2, [r7, #23]
 800051a:	00d2      	lsls	r2, r2, #3
 800051c:	431a      	orrs	r2, r3
 800051e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000520:	601a      	str	r2, [r3, #0]
        UsedTimerRegSet->PSC  = Prescale;
 8000522:	7bfa      	ldrb	r2, [r7, #15]
 8000524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000526:	629a      	str	r2, [r3, #40]	; 0x28
        UsedTimerRegSet->ARR  = ChannelTickValueMax;
 8000528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800052a:	69ba      	ldr	r2, [r7, #24]
 800052c:	62da      	str	r2, [r3, #44]	; 0x2c
    for(uint8_t i=0; i<ChannelsCount;i++)
 800052e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000532:	3301      	adds	r3, #1
 8000534:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8000538:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800053c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000540:	429a      	cmp	r2, r3
 8000542:	f4ff af2e 	bcc.w	80003a2 <Gpt_Init+0x1e>
        }
    }
}
 8000546:	bf00      	nop
 8000548:	bf00      	nop
 800054a:	3734      	adds	r7, #52	; 0x34
 800054c:	46bd      	mov	sp, r7
 800054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000552:	4770      	bx	lr
 8000554:	40010000 	.word	0x40010000
 8000558:	40000400 	.word	0x40000400
 800055c:	40000800 	.word	0x40000800
 8000560:	40000c00 	.word	0x40000c00
 8000564:	40001000 	.word	0x40001000
 8000568:	40001400 	.word	0x40001400
 800056c:	40010400 	.word	0x40010400
 8000570:	40014000 	.word	0x40014000
 8000574:	40014400 	.word	0x40014400
 8000578:	40014800 	.word	0x40014800
 800057c:	40001800 	.word	0x40001800
 8000580:	40001c00 	.word	0x40001c00
 8000584:	40002000 	.word	0x40002000
 8000588:	e000e010 	.word	0xe000e010

0800058c <Gpt_StartTimer>:
*  @retval             : None
*  Description         : Starts a timer channel.
***********************************************************************************************************************
*/
void Gpt_StartTimer(Gpt_ChannelType Channel,Gpt_ValueType Value )
{
 800058c:	b480      	push	{r7}
 800058e:	b085      	sub	sp, #20
 8000590:	af00      	add	r7, sp, #0
 8000592:	4603      	mov	r3, r0
 8000594:	6039      	str	r1, [r7, #0]
 8000596:	71fb      	strb	r3, [r7, #7]
    TIM_RegDef_t*   UsedTimerRegSet;
    switch(Channel)
 8000598:	79fb      	ldrb	r3, [r7, #7]
 800059a:	3b01      	subs	r3, #1
 800059c:	2b0e      	cmp	r3, #14
 800059e:	d84c      	bhi.n	800063a <Gpt_StartTimer+0xae>
 80005a0:	a201      	add	r2, pc, #4	; (adr r2, 80005a8 <Gpt_StartTimer+0x1c>)
 80005a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005a6:	bf00      	nop
 80005a8:	080005e5 	.word	0x080005e5
 80005ac:	080005eb 	.word	0x080005eb
 80005b0:	080005f3 	.word	0x080005f3
 80005b4:	080005f9 	.word	0x080005f9
 80005b8:	080005ff 	.word	0x080005ff
 80005bc:	08000605 	.word	0x08000605
 80005c0:	0800060b 	.word	0x0800060b
 80005c4:	08000611 	.word	0x08000611
 80005c8:	08000617 	.word	0x08000617
 80005cc:	0800061d 	.word	0x0800061d
 80005d0:	08000623 	.word	0x08000623
 80005d4:	08000629 	.word	0x08000629
 80005d8:	0800062f 	.word	0x0800062f
 80005dc:	08000635 	.word	0x08000635
 80005e0:	0800063b 	.word	0x0800063b
        {
            case GPT_TIMER_CHANNEL_1 : UsedTimerRegSet =TIM1 ;break;
 80005e4:	4b22      	ldr	r3, [pc, #136]	; (8000670 <Gpt_StartTimer+0xe4>)
 80005e6:	60fb      	str	r3, [r7, #12]
 80005e8:	e028      	b.n	800063c <Gpt_StartTimer+0xb0>
            case GPT_TIMER_CHANNEL_2 : UsedTimerRegSet =TIM2 ;break;
 80005ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005ee:	60fb      	str	r3, [r7, #12]
 80005f0:	e024      	b.n	800063c <Gpt_StartTimer+0xb0>
            case GPT_TIMER_CHANNEL_3 : UsedTimerRegSet =TIM3 ;break;
 80005f2:	4b20      	ldr	r3, [pc, #128]	; (8000674 <Gpt_StartTimer+0xe8>)
 80005f4:	60fb      	str	r3, [r7, #12]
 80005f6:	e021      	b.n	800063c <Gpt_StartTimer+0xb0>
            case GPT_TIMER_CHANNEL_4 : UsedTimerRegSet =TIM4 ;break;
 80005f8:	4b1f      	ldr	r3, [pc, #124]	; (8000678 <Gpt_StartTimer+0xec>)
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	e01e      	b.n	800063c <Gpt_StartTimer+0xb0>
            case GPT_TIMER_CHANNEL_5 : UsedTimerRegSet =TIM5 ;break;
 80005fe:	4b1f      	ldr	r3, [pc, #124]	; (800067c <Gpt_StartTimer+0xf0>)
 8000600:	60fb      	str	r3, [r7, #12]
 8000602:	e01b      	b.n	800063c <Gpt_StartTimer+0xb0>
            case GPT_TIMER_CHANNEL_6 : UsedTimerRegSet =TIM6 ;break;
 8000604:	4b1e      	ldr	r3, [pc, #120]	; (8000680 <Gpt_StartTimer+0xf4>)
 8000606:	60fb      	str	r3, [r7, #12]
 8000608:	e018      	b.n	800063c <Gpt_StartTimer+0xb0>
            case GPT_TIMER_CHANNEL_7 : UsedTimerRegSet =TIM7 ;break;
 800060a:	4b1e      	ldr	r3, [pc, #120]	; (8000684 <Gpt_StartTimer+0xf8>)
 800060c:	60fb      	str	r3, [r7, #12]
 800060e:	e015      	b.n	800063c <Gpt_StartTimer+0xb0>
            case GPT_TIMER_CHANNEL_8 : UsedTimerRegSet =TIM8 ;break;
 8000610:	4b1d      	ldr	r3, [pc, #116]	; (8000688 <Gpt_StartTimer+0xfc>)
 8000612:	60fb      	str	r3, [r7, #12]
 8000614:	e012      	b.n	800063c <Gpt_StartTimer+0xb0>
            case GPT_TIMER_CHANNEL_9 : UsedTimerRegSet =TIM9 ;break;
 8000616:	4b1d      	ldr	r3, [pc, #116]	; (800068c <Gpt_StartTimer+0x100>)
 8000618:	60fb      	str	r3, [r7, #12]
 800061a:	e00f      	b.n	800063c <Gpt_StartTimer+0xb0>
            case GPT_TIMER_CHANNEL_10: UsedTimerRegSet =TIM10;break;
 800061c:	4b1c      	ldr	r3, [pc, #112]	; (8000690 <Gpt_StartTimer+0x104>)
 800061e:	60fb      	str	r3, [r7, #12]
 8000620:	e00c      	b.n	800063c <Gpt_StartTimer+0xb0>
            case GPT_TIMER_CHANNEL_11: UsedTimerRegSet =TIM11;break;
 8000622:	4b1c      	ldr	r3, [pc, #112]	; (8000694 <Gpt_StartTimer+0x108>)
 8000624:	60fb      	str	r3, [r7, #12]
 8000626:	e009      	b.n	800063c <Gpt_StartTimer+0xb0>
            case GPT_TIMER_CHANNEL_12: UsedTimerRegSet =TIM12;break;
 8000628:	4b1b      	ldr	r3, [pc, #108]	; (8000698 <Gpt_StartTimer+0x10c>)
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	e006      	b.n	800063c <Gpt_StartTimer+0xb0>
            case GPT_TIMER_CHANNEL_13: UsedTimerRegSet =TIM13;break;
 800062e:	4b1b      	ldr	r3, [pc, #108]	; (800069c <Gpt_StartTimer+0x110>)
 8000630:	60fb      	str	r3, [r7, #12]
 8000632:	e003      	b.n	800063c <Gpt_StartTimer+0xb0>
            case GPT_TIMER_CHANNEL_14: UsedTimerRegSet =TIM14;break;
 8000634:	4b1a      	ldr	r3, [pc, #104]	; (80006a0 <Gpt_StartTimer+0x114>)
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	e000      	b.n	800063c <Gpt_StartTimer+0xb0>
            case GPT_TIMER_CHANNEL_15: /*********/;break;
            default:break;
 800063a:	bf00      	nop
        }
        if(Channel==GPT_SYSTICK_TIMER)
 800063c:	79fb      	ldrb	r3, [r7, #7]
 800063e:	2b0f      	cmp	r3, #15
 8000640:	d10c      	bne.n	800065c <Gpt_StartTimer+0xd0>
        {
            /*Put Value in STK Load register*/
            SYSTICK->STK_LOAD = Value;
 8000642:	4a18      	ldr	r2, [pc, #96]	; (80006a4 <Gpt_StartTimer+0x118>)
 8000644:	683b      	ldr	r3, [r7, #0]
 8000646:	6053      	str	r3, [r2, #4]
            /*STK counter = 0*/
            SYSTICK->STK_VAL=0;
 8000648:	4b16      	ldr	r3, [pc, #88]	; (80006a4 <Gpt_StartTimer+0x118>)
 800064a:	2200      	movs	r2, #0
 800064c:	609a      	str	r2, [r3, #8]
            /*Enable counter*/
            SYSTICK->STK_CTRL |= (STCR_MASK<<STCR_COUNTER_PIN_ACCESS);// To start counting down
 800064e:	4b15      	ldr	r3, [pc, #84]	; (80006a4 <Gpt_StartTimer+0x118>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4a14      	ldr	r2, [pc, #80]	; (80006a4 <Gpt_StartTimer+0x118>)
 8000654:	f043 0301 	orr.w	r3, r3, #1
 8000658:	6013      	str	r3, [r2, #0]
        else
        {
        UsedTimerRegSet->CNT = Value;
        }

}	
 800065a:	e002      	b.n	8000662 <Gpt_StartTimer+0xd6>
        UsedTimerRegSet->CNT = Value;
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	683a      	ldr	r2, [r7, #0]
 8000660:	625a      	str	r2, [r3, #36]	; 0x24
}	
 8000662:	bf00      	nop
 8000664:	3714      	adds	r7, #20
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	40010000 	.word	0x40010000
 8000674:	40000400 	.word	0x40000400
 8000678:	40000800 	.word	0x40000800
 800067c:	40000c00 	.word	0x40000c00
 8000680:	40001000 	.word	0x40001000
 8000684:	40001400 	.word	0x40001400
 8000688:	40010400 	.word	0x40010400
 800068c:	40014000 	.word	0x40014000
 8000690:	40014400 	.word	0x40014400
 8000694:	40014800 	.word	0x40014800
 8000698:	40001800 	.word	0x40001800
 800069c:	40001c00 	.word	0x40001c00
 80006a0:	40002000 	.word	0x40002000
 80006a4:	e000e010 	.word	0xe000e010

080006a8 <Gpt_EnableNotification>:
*  Description         : Enables the interrupt notification for a channel
*                        relevant in normal mode).
***********************************************************************************************************************
*/
void Gpt_EnableNotification	(Gpt_ChannelType Channel)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b085      	sub	sp, #20
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	4603      	mov	r3, r0
 80006b0:	71fb      	strb	r3, [r7, #7]
    TIM_RegDef_t*   UsedTimerRegSet;
    switch(Channel)
 80006b2:	79fb      	ldrb	r3, [r7, #7]
 80006b4:	3b01      	subs	r3, #1
 80006b6:	2b0e      	cmp	r3, #14
 80006b8:	d84b      	bhi.n	8000752 <Gpt_EnableNotification+0xaa>
 80006ba:	a201      	add	r2, pc, #4	; (adr r2, 80006c0 <Gpt_EnableNotification+0x18>)
 80006bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006c0:	080006fd 	.word	0x080006fd
 80006c4:	08000703 	.word	0x08000703
 80006c8:	0800070b 	.word	0x0800070b
 80006cc:	08000711 	.word	0x08000711
 80006d0:	08000717 	.word	0x08000717
 80006d4:	0800071d 	.word	0x0800071d
 80006d8:	08000723 	.word	0x08000723
 80006dc:	08000729 	.word	0x08000729
 80006e0:	0800072f 	.word	0x0800072f
 80006e4:	08000735 	.word	0x08000735
 80006e8:	0800073b 	.word	0x0800073b
 80006ec:	08000741 	.word	0x08000741
 80006f0:	08000747 	.word	0x08000747
 80006f4:	0800074d 	.word	0x0800074d
 80006f8:	08000753 	.word	0x08000753
        {
            case GPT_TIMER_CHANNEL_1 : UsedTimerRegSet =TIM1 ;break;
 80006fc:	4b23      	ldr	r3, [pc, #140]	; (800078c <Gpt_EnableNotification+0xe4>)
 80006fe:	60fb      	str	r3, [r7, #12]
 8000700:	e028      	b.n	8000754 <Gpt_EnableNotification+0xac>
            case GPT_TIMER_CHANNEL_2 : UsedTimerRegSet =TIM2 ;break;
 8000702:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000706:	60fb      	str	r3, [r7, #12]
 8000708:	e024      	b.n	8000754 <Gpt_EnableNotification+0xac>
            case GPT_TIMER_CHANNEL_3 : UsedTimerRegSet =TIM3 ;break;
 800070a:	4b21      	ldr	r3, [pc, #132]	; (8000790 <Gpt_EnableNotification+0xe8>)
 800070c:	60fb      	str	r3, [r7, #12]
 800070e:	e021      	b.n	8000754 <Gpt_EnableNotification+0xac>
            case GPT_TIMER_CHANNEL_4 : UsedTimerRegSet =TIM4 ;break;
 8000710:	4b20      	ldr	r3, [pc, #128]	; (8000794 <Gpt_EnableNotification+0xec>)
 8000712:	60fb      	str	r3, [r7, #12]
 8000714:	e01e      	b.n	8000754 <Gpt_EnableNotification+0xac>
            case GPT_TIMER_CHANNEL_5 : UsedTimerRegSet =TIM5 ;break;
 8000716:	4b20      	ldr	r3, [pc, #128]	; (8000798 <Gpt_EnableNotification+0xf0>)
 8000718:	60fb      	str	r3, [r7, #12]
 800071a:	e01b      	b.n	8000754 <Gpt_EnableNotification+0xac>
            case GPT_TIMER_CHANNEL_6 : UsedTimerRegSet =TIM6 ;break;
 800071c:	4b1f      	ldr	r3, [pc, #124]	; (800079c <Gpt_EnableNotification+0xf4>)
 800071e:	60fb      	str	r3, [r7, #12]
 8000720:	e018      	b.n	8000754 <Gpt_EnableNotification+0xac>
            case GPT_TIMER_CHANNEL_7 : UsedTimerRegSet =TIM7 ;break;
 8000722:	4b1f      	ldr	r3, [pc, #124]	; (80007a0 <Gpt_EnableNotification+0xf8>)
 8000724:	60fb      	str	r3, [r7, #12]
 8000726:	e015      	b.n	8000754 <Gpt_EnableNotification+0xac>
            case GPT_TIMER_CHANNEL_8 : UsedTimerRegSet =TIM8 ;break;
 8000728:	4b1e      	ldr	r3, [pc, #120]	; (80007a4 <Gpt_EnableNotification+0xfc>)
 800072a:	60fb      	str	r3, [r7, #12]
 800072c:	e012      	b.n	8000754 <Gpt_EnableNotification+0xac>
            case GPT_TIMER_CHANNEL_9 : UsedTimerRegSet =TIM9 ;break;
 800072e:	4b1e      	ldr	r3, [pc, #120]	; (80007a8 <Gpt_EnableNotification+0x100>)
 8000730:	60fb      	str	r3, [r7, #12]
 8000732:	e00f      	b.n	8000754 <Gpt_EnableNotification+0xac>
            case GPT_TIMER_CHANNEL_10: UsedTimerRegSet =TIM10;break;
 8000734:	4b1d      	ldr	r3, [pc, #116]	; (80007ac <Gpt_EnableNotification+0x104>)
 8000736:	60fb      	str	r3, [r7, #12]
 8000738:	e00c      	b.n	8000754 <Gpt_EnableNotification+0xac>
            case GPT_TIMER_CHANNEL_11: UsedTimerRegSet =TIM11;break;
 800073a:	4b1d      	ldr	r3, [pc, #116]	; (80007b0 <Gpt_EnableNotification+0x108>)
 800073c:	60fb      	str	r3, [r7, #12]
 800073e:	e009      	b.n	8000754 <Gpt_EnableNotification+0xac>
            case GPT_TIMER_CHANNEL_12: UsedTimerRegSet =TIM12;break;
 8000740:	4b1c      	ldr	r3, [pc, #112]	; (80007b4 <Gpt_EnableNotification+0x10c>)
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	e006      	b.n	8000754 <Gpt_EnableNotification+0xac>
            case GPT_TIMER_CHANNEL_13: UsedTimerRegSet =TIM13;break;
 8000746:	4b1c      	ldr	r3, [pc, #112]	; (80007b8 <Gpt_EnableNotification+0x110>)
 8000748:	60fb      	str	r3, [r7, #12]
 800074a:	e003      	b.n	8000754 <Gpt_EnableNotification+0xac>
            case GPT_TIMER_CHANNEL_14: UsedTimerRegSet =TIM14;break;
 800074c:	4b1b      	ldr	r3, [pc, #108]	; (80007bc <Gpt_EnableNotification+0x114>)
 800074e:	60fb      	str	r3, [r7, #12]
 8000750:	e000      	b.n	8000754 <Gpt_EnableNotification+0xac>
            case GPT_TIMER_CHANNEL_15: /*********/;break;
            default:break;
 8000752:	bf00      	nop
        }
        if(Channel==GPT_SYSTICK_TIMER)
 8000754:	79fb      	ldrb	r3, [r7, #7]
 8000756:	2b0f      	cmp	r3, #15
 8000758:	d106      	bne.n	8000768 <Gpt_EnableNotification+0xc0>
        {
            SYSTICK ->STK_CTRL |= (STCR_MASK<<STCR_TICKINT_PIN_ACCESS);
 800075a:	4b19      	ldr	r3, [pc, #100]	; (80007c0 <Gpt_EnableNotification+0x118>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	4a18      	ldr	r2, [pc, #96]	; (80007c0 <Gpt_EnableNotification+0x118>)
 8000760:	f043 0302 	orr.w	r3, r3, #2
 8000764:	6013      	str	r3, [r2, #0]
        else
        {
        	UsedTimerRegSet->EGR &=~(EGR_TG_MASK<<EGR_TG_BIT_ACCESS);
        	UsedTimerRegSet->EGR |= (EGR_TG_MASK<<EGR_TG_BIT_ACCESS);
        }
}	
 8000766:	e00b      	b.n	8000780 <Gpt_EnableNotification+0xd8>
        	UsedTimerRegSet->EGR &=~(EGR_TG_MASK<<EGR_TG_BIT_ACCESS);
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	695b      	ldr	r3, [r3, #20]
 800076c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	615a      	str	r2, [r3, #20]
        	UsedTimerRegSet->EGR |= (EGR_TG_MASK<<EGR_TG_BIT_ACCESS);
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	695b      	ldr	r3, [r3, #20]
 8000778:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	615a      	str	r2, [r3, #20]
}	
 8000780:	bf00      	nop
 8000782:	3714      	adds	r7, #20
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr
 800078c:	40010000 	.word	0x40010000
 8000790:	40000400 	.word	0x40000400
 8000794:	40000800 	.word	0x40000800
 8000798:	40000c00 	.word	0x40000c00
 800079c:	40001000 	.word	0x40001000
 80007a0:	40001400 	.word	0x40001400
 80007a4:	40010400 	.word	0x40010400
 80007a8:	40014000 	.word	0x40014000
 80007ac:	40014400 	.word	0x40014400
 80007b0:	40014800 	.word	0x40014800
 80007b4:	40001800 	.word	0x40001800
 80007b8:	40001c00 	.word	0x40001c00
 80007bc:	40002000 	.word	0x40002000
 80007c0:	e000e010 	.word	0xe000e010

080007c4 <NVIC_Init>:
* \Parameters (in) : None                     
* \Parameters (out): None                                                      
* \Return value:   : None
*******************************************************************************/
void NVIC_Init(void)
{
 80007c4:	b4b0      	push	{r4, r5, r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
	uint8_t Groupriority;
	NVIC_InterruptState_t InterruptState;
	

/*TODO Configure Grouping\SubGrouping System in Application Interrupt and Reset Control Register (AIRCR) in SCB*/
    SCB_AIRCR =  (Group);
 80007ca:	4aae      	ldr	r2, [pc, #696]	; (8000a84 <NVIC_Init+0x2c0>)
 80007cc:	4bae      	ldr	r3, [pc, #696]	; (8000a88 <NVIC_Init+0x2c4>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	6013      	str	r3, [r2, #0]

/*TODO : Assign Group\Subgroup priority in NVIC_PRIx Nvic and SCB_SHPRx Registers*/  
	for(NVIC_Cfg_Counter=0;NVIC_Cfg_Counter<NVIC_ACTIVATED_INT_SIZE;NVIC_Cfg_Counter++)
 80007d2:	2300      	movs	r3, #0
 80007d4:	71fb      	strb	r3, [r7, #7]
 80007d6:	e0fe      	b.n	80009d6 <NVIC_Init+0x212>
	{	
		InterruptNumber =NVIC_Cfg[NVIC_Cfg_Counter].interruptNumber;
 80007d8:	79fb      	ldrb	r3, [r7, #7]
 80007da:	4aac      	ldr	r2, [pc, #688]	; (8000a8c <NVIC_Init+0x2c8>)
 80007dc:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 80007e0:	717b      	strb	r3, [r7, #5]
		SubgroupPriority=NVIC_Cfg[NVIC_Cfg_Counter].subgroupPriority;
 80007e2:	79fb      	ldrb	r3, [r7, #7]
 80007e4:	4aa9      	ldr	r2, [pc, #676]	; (8000a8c <NVIC_Init+0x2c8>)
 80007e6:	009b      	lsls	r3, r3, #2
 80007e8:	4413      	add	r3, r2
 80007ea:	789b      	ldrb	r3, [r3, #2]
 80007ec:	713b      	strb	r3, [r7, #4]
		Groupriority	=NVIC_Cfg[NVIC_Cfg_Counter].groupPriority;
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	4aa6      	ldr	r2, [pc, #664]	; (8000a8c <NVIC_Init+0x2c8>)
 80007f2:	009b      	lsls	r3, r3, #2
 80007f4:	4413      	add	r3, r2
 80007f6:	785b      	ldrb	r3, [r3, #1]
 80007f8:	70fb      	strb	r3, [r7, #3]
		InterruptState  =NVIC_Cfg[NVIC_Cfg_Counter].interruptState; 
 80007fa:	79fb      	ldrb	r3, [r7, #7]
 80007fc:	4aa3      	ldr	r2, [pc, #652]	; (8000a8c <NVIC_Init+0x2c8>)
 80007fe:	009b      	lsls	r3, r3, #2
 8000800:	4413      	add	r3, r2
 8000802:	78db      	ldrb	r3, [r3, #3]
 8000804:	71bb      	strb	r3, [r7, #6]
		//page 229 in f446 programming manual
		uint8_t Priority =  (SubgroupPriority) | (Groupriority) << ( (Group - BASE_GROUP) / GROUP_UNIT_DIFFERECE )  ;// 0x100 Hex  ---> 256 Decimal
 8000806:	78fa      	ldrb	r2, [r7, #3]
 8000808:	4b9f      	ldr	r3, [pc, #636]	; (8000a88 <NVIC_Init+0x2c4>)
 800080a:	6819      	ldr	r1, [r3, #0]
 800080c:	4ba0      	ldr	r3, [pc, #640]	; (8000a90 <NVIC_Init+0x2cc>)
 800080e:	440b      	add	r3, r1
 8000810:	0a1b      	lsrs	r3, r3, #8
 8000812:	fa02 f303 	lsl.w	r3, r2, r3
 8000816:	b25a      	sxtb	r2, r3
 8000818:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800081c:	4313      	orrs	r3, r2
 800081e:	b25b      	sxtb	r3, r3
 8000820:	70bb      	strb	r3, [r7, #2]
		
		if( InterruptNumber < NVIC_ZERO )
 8000822:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000826:	2b00      	cmp	r3, #0
 8000828:	da5d      	bge.n	80008e6 <NVIC_Init+0x122>
		{
			//Core Peripheral
			switch(InterruptNumber)
 800082a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800082e:	330c      	adds	r3, #12
 8000830:	2b0b      	cmp	r3, #11
 8000832:	f200 80cc 	bhi.w	80009ce <NVIC_Init+0x20a>
 8000836:	a201      	add	r2, pc, #4	; (adr r2, 800083c <NVIC_Init+0x78>)
 8000838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800083c:	0800086d 	.word	0x0800086d
 8000840:	08000889 	.word	0x08000889
 8000844:	080008a5 	.word	0x080008a5
 8000848:	080009cf 	.word	0x080009cf
 800084c:	080009cf 	.word	0x080009cf
 8000850:	080009cf 	.word	0x080009cf
 8000854:	080009cf 	.word	0x080009cf
 8000858:	080008c1 	.word	0x080008c1
 800085c:	080009cf 	.word	0x080009cf
 8000860:	080009cf 	.word	0x080009cf
 8000864:	080008cb 	.word	0x080008cb
 8000868:	080008d5 	.word	0x080008d5
			{
				case MemManage :
					SCB->SCB_SHPR1 = ( Priority ) << (MEMMANAGE_BITSHIFT );
 800086c:	78bb      	ldrb	r3, [r7, #2]
 800086e:	011a      	lsls	r2, r3, #4
 8000870:	4b88      	ldr	r3, [pc, #544]	; (8000a94 <NVIC_Init+0x2d0>)
 8000872:	619a      	str	r2, [r3, #24]
					SCB_SHCSR->BIT.MEMFAULTENA=InterruptState;
 8000874:	4a88      	ldr	r2, [pc, #544]	; (8000a98 <NVIC_Init+0x2d4>)
 8000876:	79bb      	ldrb	r3, [r7, #6]
 8000878:	f003 0301 	and.w	r3, r3, #1
 800087c:	b2d9      	uxtb	r1, r3
 800087e:	6813      	ldr	r3, [r2, #0]
 8000880:	f361 4310 	bfi	r3, r1, #16, #1
 8000884:	6013      	str	r3, [r2, #0]
					break;
 8000886:	e0a3      	b.n	80009d0 <NVIC_Init+0x20c>
				case BusFault  :
					SCB->SCB_SHPR1 = ( Priority ) << (BUSFAULT_BITSHIFT  );
 8000888:	78bb      	ldrb	r3, [r7, #2]
 800088a:	031a      	lsls	r2, r3, #12
 800088c:	4b81      	ldr	r3, [pc, #516]	; (8000a94 <NVIC_Init+0x2d0>)
 800088e:	619a      	str	r2, [r3, #24]
					SCB_SHCSR->BIT.BUSFAULTENA=InterruptState;
 8000890:	4a81      	ldr	r2, [pc, #516]	; (8000a98 <NVIC_Init+0x2d4>)
 8000892:	79bb      	ldrb	r3, [r7, #6]
 8000894:	f003 0301 	and.w	r3, r3, #1
 8000898:	b2d9      	uxtb	r1, r3
 800089a:	6813      	ldr	r3, [r2, #0]
 800089c:	f361 4351 	bfi	r3, r1, #17, #1
 80008a0:	6013      	str	r3, [r2, #0]
					break;
 80008a2:	e095      	b.n	80009d0 <NVIC_Init+0x20c>
				case UsageFault:
					SCB->SCB_SHPR1 = ( Priority ) << (USAGEFAULT_BITSHIFT);
 80008a4:	78bb      	ldrb	r3, [r7, #2]
 80008a6:	051a      	lsls	r2, r3, #20
 80008a8:	4b7a      	ldr	r3, [pc, #488]	; (8000a94 <NVIC_Init+0x2d0>)
 80008aa:	619a      	str	r2, [r3, #24]
					SCB_SHCSR->BIT.USGFAULTENA=InterruptState;
 80008ac:	4a7a      	ldr	r2, [pc, #488]	; (8000a98 <NVIC_Init+0x2d4>)
 80008ae:	79bb      	ldrb	r3, [r7, #6]
 80008b0:	f003 0301 	and.w	r3, r3, #1
 80008b4:	b2d9      	uxtb	r1, r3
 80008b6:	6813      	ldr	r3, [r2, #0]
 80008b8:	f361 4392 	bfi	r3, r1, #18, #1
 80008bc:	6013      	str	r3, [r2, #0]
					break;
 80008be:	e087      	b.n	80009d0 <NVIC_Init+0x20c>
				case SVC       :SCB->SCB_SHPR2 = ( Priority ) << (SVC_BITSHIFT   );break;
 80008c0:	78bb      	ldrb	r3, [r7, #2]
 80008c2:	071a      	lsls	r2, r3, #28
 80008c4:	4b73      	ldr	r3, [pc, #460]	; (8000a94 <NVIC_Init+0x2d0>)
 80008c6:	61da      	str	r2, [r3, #28]
 80008c8:	e082      	b.n	80009d0 <NVIC_Init+0x20c>
				case PendSV    :SCB->SCB_SHPR3 = ( Priority ) << (PENDSV_BITSHIFT);break;
 80008ca:	78bb      	ldrb	r3, [r7, #2]
 80008cc:	051a      	lsls	r2, r3, #20
 80008ce:	4b71      	ldr	r3, [pc, #452]	; (8000a94 <NVIC_Init+0x2d0>)
 80008d0:	621a      	str	r2, [r3, #32]
 80008d2:	e07d      	b.n	80009d0 <NVIC_Init+0x20c>
				case SysTick   :
					SCB->SCB_SHPR3 = ( Priority ) << (SYSTICK_BITSHIFT);
 80008d4:	78bb      	ldrb	r3, [r7, #2]
 80008d6:	071a      	lsls	r2, r3, #28
 80008d8:	4b6e      	ldr	r3, [pc, #440]	; (8000a94 <NVIC_Init+0x2d0>)
 80008da:	621a      	str	r2, [r3, #32]
					SYSTICK->STK_CTRL = InterruptState << SYSTICK_INT_EN_BITSHIFT;
 80008dc:	79bb      	ldrb	r3, [r7, #6]
 80008de:	005a      	lsls	r2, r3, #1
 80008e0:	4b6e      	ldr	r3, [pc, #440]	; (8000a9c <NVIC_Init+0x2d8>)
 80008e2:	601a      	str	r2, [r3, #0]
					break;
 80008e4:	e074      	b.n	80009d0 <NVIC_Init+0x20c>
				default:break;
			}
		}
		else if( InterruptNumber >= 0 )
 80008e6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	db70      	blt.n	80009d0 <NVIC_Init+0x20c>
		{
			NVIC->NVIC_IPR [ InterruptNumber/4  ] |=  Priority << ((8*(InterruptNumber%4))+4) ;
 80008ee:	4a6c      	ldr	r2, [pc, #432]	; (8000aa0 <NVIC_Init+0x2dc>)
 80008f0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	da00      	bge.n	80008fa <NVIC_Init+0x136>
 80008f8:	3303      	adds	r3, #3
 80008fa:	109b      	asrs	r3, r3, #2
 80008fc:	b25c      	sxtb	r4, r3
 80008fe:	4623      	mov	r3, r4
 8000900:	4413      	add	r3, r2
 8000902:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 8000906:	b2db      	uxtb	r3, r3
 8000908:	b25a      	sxtb	r2, r3
 800090a:	78b9      	ldrb	r1, [r7, #2]
 800090c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000910:	4258      	negs	r0, r3
 8000912:	f003 0303 	and.w	r3, r3, #3
 8000916:	f000 0003 	and.w	r0, r0, #3
 800091a:	bf58      	it	pl
 800091c:	4243      	negpl	r3, r0
 800091e:	b25b      	sxtb	r3, r3
 8000920:	00db      	lsls	r3, r3, #3
 8000922:	3304      	adds	r3, #4
 8000924:	fa01 f303 	lsl.w	r3, r1, r3
 8000928:	b25b      	sxtb	r3, r3
 800092a:	4313      	orrs	r3, r2
 800092c:	b25a      	sxtb	r2, r3
 800092e:	4b5c      	ldr	r3, [pc, #368]	; (8000aa0 <NVIC_Init+0x2dc>)
 8000930:	4621      	mov	r1, r4
 8000932:	b2d2      	uxtb	r2, r2
 8000934:	440b      	add	r3, r1
 8000936:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
			NVIC->NVIC_ISER[ InterruptNumber/31 ] &= ~(NVIC_ONE << (InterruptNumber%31));
 800093a:	4959      	ldr	r1, [pc, #356]	; (8000aa0 <NVIC_Init+0x2dc>)
 800093c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000940:	4a58      	ldr	r2, [pc, #352]	; (8000aa4 <NVIC_Init+0x2e0>)
 8000942:	fb82 0203 	smull	r0, r2, r2, r3
 8000946:	441a      	add	r2, r3
 8000948:	1112      	asrs	r2, r2, #4
 800094a:	17db      	asrs	r3, r3, #31
 800094c:	1ad3      	subs	r3, r2, r3
 800094e:	b25c      	sxtb	r4, r3
 8000950:	4623      	mov	r3, r4
 8000952:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 8000956:	f997 2005 	ldrsb.w	r2, [r7, #5]
 800095a:	4b52      	ldr	r3, [pc, #328]	; (8000aa4 <NVIC_Init+0x2e0>)
 800095c:	fb83 1302 	smull	r1, r3, r3, r2
 8000960:	4413      	add	r3, r2
 8000962:	1119      	asrs	r1, r3, #4
 8000964:	17d3      	asrs	r3, r2, #31
 8000966:	1ac9      	subs	r1, r1, r3
 8000968:	460b      	mov	r3, r1
 800096a:	015b      	lsls	r3, r3, #5
 800096c:	1a5b      	subs	r3, r3, r1
 800096e:	1ad3      	subs	r3, r2, r3
 8000970:	b25b      	sxtb	r3, r3
 8000972:	461a      	mov	r2, r3
 8000974:	2301      	movs	r3, #1
 8000976:	4093      	lsls	r3, r2
 8000978:	43db      	mvns	r3, r3
 800097a:	4a49      	ldr	r2, [pc, #292]	; (8000aa0 <NVIC_Init+0x2dc>)
 800097c:	4621      	mov	r1, r4
 800097e:	4003      	ands	r3, r0
 8000980:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			NVIC->NVIC_ISER[ InterruptNumber/31 ] |= InterruptState << (InterruptNumber%31) ;
 8000984:	4946      	ldr	r1, [pc, #280]	; (8000aa0 <NVIC_Init+0x2dc>)
 8000986:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800098a:	4a46      	ldr	r2, [pc, #280]	; (8000aa4 <NVIC_Init+0x2e0>)
 800098c:	fb82 0203 	smull	r0, r2, r2, r3
 8000990:	441a      	add	r2, r3
 8000992:	1112      	asrs	r2, r2, #4
 8000994:	17db      	asrs	r3, r3, #31
 8000996:	1ad3      	subs	r3, r2, r3
 8000998:	b25d      	sxtb	r5, r3
 800099a:	462b      	mov	r3, r5
 800099c:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 80009a0:	79bc      	ldrb	r4, [r7, #6]
 80009a2:	f997 2005 	ldrsb.w	r2, [r7, #5]
 80009a6:	4b3f      	ldr	r3, [pc, #252]	; (8000aa4 <NVIC_Init+0x2e0>)
 80009a8:	fb83 1302 	smull	r1, r3, r3, r2
 80009ac:	4413      	add	r3, r2
 80009ae:	1119      	asrs	r1, r3, #4
 80009b0:	17d3      	asrs	r3, r2, #31
 80009b2:	1ac9      	subs	r1, r1, r3
 80009b4:	460b      	mov	r3, r1
 80009b6:	015b      	lsls	r3, r3, #5
 80009b8:	1a5b      	subs	r3, r3, r1
 80009ba:	1ad3      	subs	r3, r2, r3
 80009bc:	b25b      	sxtb	r3, r3
 80009be:	fa04 f303 	lsl.w	r3, r4, r3
 80009c2:	4a37      	ldr	r2, [pc, #220]	; (8000aa0 <NVIC_Init+0x2dc>)
 80009c4:	4629      	mov	r1, r5
 80009c6:	4303      	orrs	r3, r0
 80009c8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80009cc:	e000      	b.n	80009d0 <NVIC_Init+0x20c>
				default:break;
 80009ce:	bf00      	nop
	for(NVIC_Cfg_Counter=0;NVIC_Cfg_Counter<NVIC_ACTIVATED_INT_SIZE;NVIC_Cfg_Counter++)
 80009d0:	79fb      	ldrb	r3, [r7, #7]
 80009d2:	3301      	adds	r3, #1
 80009d4:	71fb      	strb	r3, [r7, #7]
 80009d6:	79fb      	ldrb	r3, [r7, #7]
 80009d8:	2b01      	cmp	r3, #1
 80009da:	f67f aefd 	bls.w	80007d8 <NVIC_Init+0x14>
		}
	}
    
	/*TODO : Enable\Disable based on user configurations in NVIC_ENx and SCB_Sys Registers */
	for(NVIC_Cfg_Counter=0;NVIC_Cfg_Counter<NVIC_ACTIVATED_INT_SIZE;NVIC_Cfg_Counter++)
 80009de:	2300      	movs	r3, #0
 80009e0:	71fb      	strb	r3, [r7, #7]
 80009e2:	e045      	b.n	8000a70 <NVIC_Init+0x2ac>
	{	
		InterruptNumber= NVIC_Cfg[NVIC_Cfg_Counter].interruptNumber;
 80009e4:	79fb      	ldrb	r3, [r7, #7]
 80009e6:	4a29      	ldr	r2, [pc, #164]	; (8000a8c <NVIC_Init+0x2c8>)
 80009e8:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 80009ec:	717b      	strb	r3, [r7, #5]
		
		if(InterruptNumber>=0)
 80009ee:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	db39      	blt.n	8000a6a <NVIC_Init+0x2a6>
		{
			NVIC->NVIC_ISER[ InterruptNumber/8 ] &= ~(NVIC_ONE << (InterruptNumber%8));
 80009f6:	4a2a      	ldr	r2, [pc, #168]	; (8000aa0 <NVIC_Init+0x2dc>)
 80009f8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	da00      	bge.n	8000a02 <NVIC_Init+0x23e>
 8000a00:	3307      	adds	r3, #7
 8000a02:	10db      	asrs	r3, r3, #3
 8000a04:	b258      	sxtb	r0, r3
 8000a06:	4603      	mov	r3, r0
 8000a08:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a0c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000a10:	4259      	negs	r1, r3
 8000a12:	f003 0307 	and.w	r3, r3, #7
 8000a16:	f001 0107 	and.w	r1, r1, #7
 8000a1a:	bf58      	it	pl
 8000a1c:	424b      	negpl	r3, r1
 8000a1e:	b25b      	sxtb	r3, r3
 8000a20:	4619      	mov	r1, r3
 8000a22:	2301      	movs	r3, #1
 8000a24:	408b      	lsls	r3, r1
 8000a26:	43db      	mvns	r3, r3
 8000a28:	491d      	ldr	r1, [pc, #116]	; (8000aa0 <NVIC_Init+0x2dc>)
 8000a2a:	4013      	ands	r3, r2
 8000a2c:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
			NVIC->NVIC_ISER[ InterruptNumber/8 ] |= InterruptState << (InterruptNumber%8) ;
 8000a30:	4a1b      	ldr	r2, [pc, #108]	; (8000aa0 <NVIC_Init+0x2dc>)
 8000a32:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	da00      	bge.n	8000a3c <NVIC_Init+0x278>
 8000a3a:	3307      	adds	r3, #7
 8000a3c:	10db      	asrs	r3, r3, #3
 8000a3e:	b25c      	sxtb	r4, r3
 8000a40:	4623      	mov	r3, r4
 8000a42:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a46:	79b9      	ldrb	r1, [r7, #6]
 8000a48:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000a4c:	4258      	negs	r0, r3
 8000a4e:	f003 0307 	and.w	r3, r3, #7
 8000a52:	f000 0007 	and.w	r0, r0, #7
 8000a56:	bf58      	it	pl
 8000a58:	4243      	negpl	r3, r0
 8000a5a:	b25b      	sxtb	r3, r3
 8000a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a60:	490f      	ldr	r1, [pc, #60]	; (8000aa0 <NVIC_Init+0x2dc>)
 8000a62:	4620      	mov	r0, r4
 8000a64:	4313      	orrs	r3, r2
 8000a66:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
	for(NVIC_Cfg_Counter=0;NVIC_Cfg_Counter<NVIC_ACTIVATED_INT_SIZE;NVIC_Cfg_Counter++)
 8000a6a:	79fb      	ldrb	r3, [r7, #7]
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	71fb      	strb	r3, [r7, #7]
 8000a70:	79fb      	ldrb	r3, [r7, #7]
 8000a72:	2b01      	cmp	r3, #1
 8000a74:	d9b6      	bls.n	80009e4 <NVIC_Init+0x220>
		}
	}
}
 8000a76:	bf00      	nop
 8000a78:	bf00      	nop
 8000a7a:	370c      	adds	r7, #12
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bcb0      	pop	{r4, r5, r7}
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	e000ed0c 	.word	0xe000ed0c
 8000a88:	08000d14 	.word	0x08000d14
 8000a8c:	08000d0c 	.word	0x08000d0c
 8000a90:	fa05fd00 	.word	0xfa05fd00
 8000a94:	e000ed00 	.word	0xe000ed00
 8000a98:	e000ed24 	.word	0xe000ed24
 8000a9c:	e000e010 	.word	0xe000e010
 8000aa0:	e000e100 	.word	0xe000e100
 8000aa4:	84210843 	.word	0x84210843

08000aa8 <Port_Init>:
 *  @param        
 *  @param       
 *  @return      
 *********************************************************************************************************************/
void Port_Init(Port_ConfigType* ConfigArrayOfPtrs)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b086      	sub	sp, #24
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
    uint8_t PinId,PinOutputType,PinInitialLevel,PinMode,PinInternalAttach,PinOutputSpeed;
    uint8_t PinPort;
    uint8_t PinNumber; 
    GPIO_RegDef_t* UsedGpioPort_Ptr;
    for(uint8_t i=0; i<NUM_OF_USED_PINS;i++)
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	75fb      	strb	r3, [r7, #23]
 8000ab4:	e0ab      	b.n	8000c0e <Port_Init+0x166>
    {
        PinId            =ConfigArrayOfPtrs[i].pinId;
 8000ab6:	7dfa      	ldrb	r2, [r7, #23]
 8000ab8:	4613      	mov	r3, r2
 8000aba:	00db      	lsls	r3, r3, #3
 8000abc:	1a9b      	subs	r3, r3, r2
 8000abe:	687a      	ldr	r2, [r7, #4]
 8000ac0:	4413      	add	r3, r2
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	75bb      	strb	r3, [r7, #22]
        PinMode          =ConfigArrayOfPtrs[i].pinMode;
 8000ac6:	7dfa      	ldrb	r2, [r7, #23]
 8000ac8:	4613      	mov	r3, r2
 8000aca:	00db      	lsls	r3, r3, #3
 8000acc:	1a9b      	subs	r3, r3, r2
 8000ace:	687a      	ldr	r2, [r7, #4]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	78db      	ldrb	r3, [r3, #3]
 8000ad4:	757b      	strb	r3, [r7, #21]
        PinInternalAttach=ConfigArrayOfPtrs[i].pinInternalAttach;
 8000ad6:	7dfa      	ldrb	r2, [r7, #23]
 8000ad8:	4613      	mov	r3, r2
 8000ada:	00db      	lsls	r3, r3, #3
 8000adc:	1a9b      	subs	r3, r3, r2
 8000ade:	687a      	ldr	r2, [r7, #4]
 8000ae0:	4413      	add	r3, r2
 8000ae2:	795b      	ldrb	r3, [r3, #5]
 8000ae4:	753b      	strb	r3, [r7, #20]
        PinOutputSpeed   =ConfigArrayOfPtrs[i].pinOutputSpeed;
 8000ae6:	7dfa      	ldrb	r2, [r7, #23]
 8000ae8:	4613      	mov	r3, r2
 8000aea:	00db      	lsls	r3, r3, #3
 8000aec:	1a9b      	subs	r3, r3, r2
 8000aee:	687a      	ldr	r2, [r7, #4]
 8000af0:	4413      	add	r3, r2
 8000af2:	799b      	ldrb	r3, [r3, #6]
 8000af4:	74fb      	strb	r3, [r7, #19]
        PinOutputType    =ConfigArrayOfPtrs[i].OutputType;
 8000af6:	7dfa      	ldrb	r2, [r7, #23]
 8000af8:	4613      	mov	r3, r2
 8000afa:	00db      	lsls	r3, r3, #3
 8000afc:	1a9b      	subs	r3, r3, r2
 8000afe:	687a      	ldr	r2, [r7, #4]
 8000b00:	4413      	add	r3, r2
 8000b02:	789b      	ldrb	r3, [r3, #2]
 8000b04:	74bb      	strb	r3, [r7, #18]

        PinPort          = PinId/PIN_PORT_CONST;
 8000b06:	7dbb      	ldrb	r3, [r7, #22]
 8000b08:	091b      	lsrs	r3, r3, #4
 8000b0a:	747b      	strb	r3, [r7, #17]
        PinNumber        = PinId%PIN_PORT_CONST; 
 8000b0c:	7dbb      	ldrb	r3, [r7, #22]
 8000b0e:	f003 030f 	and.w	r3, r3, #15
 8000b12:	743b      	strb	r3, [r7, #16]

        UsedGpioPort_Ptr = GPIOx(PinPort*GPIO_OFFSET);
 8000b14:	7c7b      	ldrb	r3, [r7, #17]
 8000b16:	029b      	lsls	r3, r3, #10
 8000b18:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000b1c:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000b20:	60fb      	str	r3, [r7, #12]
        /*Pin mode*/
        UsedGpioPort_Ptr->MODER &=~(PORT_CONST_3<< (PORT_CONST_2*PinNumber));
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	7c3a      	ldrb	r2, [r7, #16]
 8000b28:	0052      	lsls	r2, r2, #1
 8000b2a:	2103      	movs	r1, #3
 8000b2c:	fa01 f202 	lsl.w	r2, r1, r2
 8000b30:	43d2      	mvns	r2, r2
 8000b32:	401a      	ands	r2, r3
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	601a      	str	r2, [r3, #0]
        UsedGpioPort_Ptr->MODER |=PinMode<< (PORT_CONST_2*PinNumber);
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	7d79      	ldrb	r1, [r7, #21]
 8000b3e:	7c3a      	ldrb	r2, [r7, #16]
 8000b40:	0052      	lsls	r2, r2, #1
 8000b42:	fa01 f202 	lsl.w	r2, r1, r2
 8000b46:	431a      	orrs	r2, r3
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	601a      	str	r2, [r3, #0]
        /*Pin Pull up or pull down*/
        UsedGpioPort_Ptr->PUPDR &=~(PORT_CONST_3   <<(PORT_CONST_2*PinNumber));
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	68db      	ldr	r3, [r3, #12]
 8000b50:	7c3a      	ldrb	r2, [r7, #16]
 8000b52:	0052      	lsls	r2, r2, #1
 8000b54:	2103      	movs	r1, #3
 8000b56:	fa01 f202 	lsl.w	r2, r1, r2
 8000b5a:	43d2      	mvns	r2, r2
 8000b5c:	401a      	ands	r2, r3
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	60da      	str	r2, [r3, #12]
        UsedGpioPort_Ptr->PUPDR |=PinInternalAttach<<(PORT_CONST_2*PinNumber);
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	68db      	ldr	r3, [r3, #12]
 8000b66:	7d39      	ldrb	r1, [r7, #20]
 8000b68:	7c3a      	ldrb	r2, [r7, #16]
 8000b6a:	0052      	lsls	r2, r2, #1
 8000b6c:	fa01 f202 	lsl.w	r2, r1, r2
 8000b70:	431a      	orrs	r2, r3
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	60da      	str	r2, [r3, #12]
        
        switch(PinMode)
 8000b76:	7d7b      	ldrb	r3, [r7, #21]
 8000b78:	2b03      	cmp	r3, #3
 8000b7a:	d844      	bhi.n	8000c06 <Port_Init+0x15e>
 8000b7c:	a201      	add	r2, pc, #4	; (adr r2, 8000b84 <Port_Init+0xdc>)
 8000b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b82:	bf00      	nop
 8000b84:	08000c07 	.word	0x08000c07
 8000b88:	08000b95 	.word	0x08000b95
 8000b8c:	08000c07 	.word	0x08000c07
 8000b90:	08000c07 	.word	0x08000c07
        {
            case Port_PIN_MODE_INPUT: /*Do Nothing*/break;
            case Port_PIN_MODE_GENERAL_PURPOSE_OUTPUT:
                /*Pin Output type*/
                UsedGpioPort_Ptr->OTYPER&=~(PORT_CONST_1<< (PORT_CONST_2*PinNumber));
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	7c3a      	ldrb	r2, [r7, #16]
 8000b9a:	0052      	lsls	r2, r2, #1
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	fa01 f202 	lsl.w	r2, r1, r2
 8000ba2:	43d2      	mvns	r2, r2
 8000ba4:	401a      	ands	r2, r3
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	605a      	str	r2, [r3, #4]
                UsedGpioPort_Ptr->OTYPER|= (PinOutputType<<(PORT_CONST_2*PinNumber));
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	685b      	ldr	r3, [r3, #4]
 8000bae:	7cb9      	ldrb	r1, [r7, #18]
 8000bb0:	7c3a      	ldrb	r2, [r7, #16]
 8000bb2:	0052      	lsls	r2, r2, #1
 8000bb4:	fa01 f202 	lsl.w	r2, r1, r2
 8000bb8:	431a      	orrs	r2, r3
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	605a      	str	r2, [r3, #4]
                /*Set initial value*/
                PinInitialLevel  =ConfigArrayOfPtrs[i].pinInitialLevel;
 8000bbe:	7dfa      	ldrb	r2, [r7, #23]
 8000bc0:	4613      	mov	r3, r2
 8000bc2:	00db      	lsls	r3, r3, #3
 8000bc4:	1a9b      	subs	r3, r3, r2
 8000bc6:	687a      	ldr	r2, [r7, #4]
 8000bc8:	4413      	add	r3, r2
 8000bca:	791b      	ldrb	r3, [r3, #4]
 8000bcc:	72fb      	strb	r3, [r7, #11]
                Dio_WriteChannel(PinId,PinInitialLevel);
 8000bce:	7afa      	ldrb	r2, [r7, #11]
 8000bd0:	7dbb      	ldrb	r3, [r7, #22]
 8000bd2:	4611      	mov	r1, r2
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff fb77 	bl	80002c8 <Dio_WriteChannel>
                /*Pin Speed*/
                UsedGpioPort_Ptr->OSPEEDR &=~(PORT_CONST_3<< (PORT_CONST_2*PinNumber));
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	689b      	ldr	r3, [r3, #8]
 8000bde:	7c3a      	ldrb	r2, [r7, #16]
 8000be0:	0052      	lsls	r2, r2, #1
 8000be2:	2103      	movs	r1, #3
 8000be4:	fa01 f202 	lsl.w	r2, r1, r2
 8000be8:	43d2      	mvns	r2, r2
 8000bea:	401a      	ands	r2, r3
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	609a      	str	r2, [r3, #8]
                UsedGpioPort_Ptr->OSPEEDR |=PinOutputSpeed<< (PORT_CONST_2*PinNumber);
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	689b      	ldr	r3, [r3, #8]
 8000bf4:	7cf9      	ldrb	r1, [r7, #19]
 8000bf6:	7c3a      	ldrb	r2, [r7, #16]
 8000bf8:	0052      	lsls	r2, r2, #1
 8000bfa:	fa01 f202 	lsl.w	r2, r1, r2
 8000bfe:	431a      	orrs	r2, r3
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	609a      	str	r2, [r3, #8]
                break;
 8000c04:	e000      	b.n	8000c08 <Port_Init+0x160>
            case Port_PIN_MODE_ALTERNATE_FUNCTION: /*Not Available*/ break;
            case Port_PIN_MODE_ANALOG:             /*Not Available*/ break;
            default:break;
 8000c06:	bf00      	nop
    for(uint8_t i=0; i<NUM_OF_USED_PINS;i++)
 8000c08:	7dfb      	ldrb	r3, [r7, #23]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	75fb      	strb	r3, [r7, #23]
 8000c0e:	7dfb      	ldrb	r3, [r7, #23]
 8000c10:	2b04      	cmp	r3, #4
 8000c12:	f67f af50 	bls.w	8000ab6 <Port_Init+0xe>
        }


    }

}
 8000c16:	bf00      	nop
 8000c18:	bf00      	nop
 8000c1a:	3718      	adds	r7, #24
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c20:	480d      	ldr	r0, [pc, #52]	; (8000c58 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c22:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c24:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c28:	480c      	ldr	r0, [pc, #48]	; (8000c5c <LoopForever+0x6>)
  ldr r1, =_edata
 8000c2a:	490d      	ldr	r1, [pc, #52]	; (8000c60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c2c:	4a0d      	ldr	r2, [pc, #52]	; (8000c64 <LoopForever+0xe>)
  movs r3, #0
 8000c2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c30:	e002      	b.n	8000c38 <LoopCopyDataInit>

08000c32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c36:	3304      	adds	r3, #4

08000c38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c3c:	d3f9      	bcc.n	8000c32 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c3e:	4a0a      	ldr	r2, [pc, #40]	; (8000c68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c40:	4c0a      	ldr	r4, [pc, #40]	; (8000c6c <LoopForever+0x16>)
  movs r3, #0
 8000c42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c44:	e001      	b.n	8000c4a <LoopFillZerobss>

08000c46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c48:	3204      	adds	r2, #4

08000c4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c4c:	d3fb      	bcc.n	8000c46 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c4e:	f000 f811 	bl	8000c74 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c52:	f7ff fad7 	bl	8000204 <main>

08000c56 <LoopForever>:

LoopForever:
    b LoopForever
 8000c56:	e7fe      	b.n	8000c56 <LoopForever>
  ldr   r0, =_estack
 8000c58:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000c5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c60:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8000c64:	08000d20 	.word	0x08000d20
  ldr r2, =_sbss
 8000c68:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8000c6c:	20000040 	.word	0x20000040

08000c70 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c70:	e7fe      	b.n	8000c70 <ADC_IRQHandler>
	...

08000c74 <__libc_init_array>:
 8000c74:	b570      	push	{r4, r5, r6, lr}
 8000c76:	4d0d      	ldr	r5, [pc, #52]	; (8000cac <__libc_init_array+0x38>)
 8000c78:	4c0d      	ldr	r4, [pc, #52]	; (8000cb0 <__libc_init_array+0x3c>)
 8000c7a:	1b64      	subs	r4, r4, r5
 8000c7c:	10a4      	asrs	r4, r4, #2
 8000c7e:	2600      	movs	r6, #0
 8000c80:	42a6      	cmp	r6, r4
 8000c82:	d109      	bne.n	8000c98 <__libc_init_array+0x24>
 8000c84:	4d0b      	ldr	r5, [pc, #44]	; (8000cb4 <__libc_init_array+0x40>)
 8000c86:	4c0c      	ldr	r4, [pc, #48]	; (8000cb8 <__libc_init_array+0x44>)
 8000c88:	f000 f818 	bl	8000cbc <_init>
 8000c8c:	1b64      	subs	r4, r4, r5
 8000c8e:	10a4      	asrs	r4, r4, #2
 8000c90:	2600      	movs	r6, #0
 8000c92:	42a6      	cmp	r6, r4
 8000c94:	d105      	bne.n	8000ca2 <__libc_init_array+0x2e>
 8000c96:	bd70      	pop	{r4, r5, r6, pc}
 8000c98:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c9c:	4798      	blx	r3
 8000c9e:	3601      	adds	r6, #1
 8000ca0:	e7ee      	b.n	8000c80 <__libc_init_array+0xc>
 8000ca2:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ca6:	4798      	blx	r3
 8000ca8:	3601      	adds	r6, #1
 8000caa:	e7f2      	b.n	8000c92 <__libc_init_array+0x1e>
 8000cac:	08000d18 	.word	0x08000d18
 8000cb0:	08000d18 	.word	0x08000d18
 8000cb4:	08000d18 	.word	0x08000d18
 8000cb8:	08000d1c 	.word	0x08000d1c

08000cbc <_init>:
 8000cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cbe:	bf00      	nop
 8000cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cc2:	bc08      	pop	{r3}
 8000cc4:	469e      	mov	lr, r3
 8000cc6:	4770      	bx	lr

08000cc8 <_fini>:
 8000cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cca:	bf00      	nop
 8000ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cce:	bc08      	pop	{r3}
 8000cd0:	469e      	mov	lr, r3
 8000cd2:	4770      	bx	lr
